{"version":3,"sources":["lib/util.js","lib/NumberInput.js","lib/DecimalInput.js","lib/CardNumberInput.js","Example.js","index.js"],"names":["NUMBER_FORMAT_FARSI","NUMBER_FORMAT_LATIN","mapToFarsi","str","toString","replace","e","String","fromCharCode","charCodeAt","mapToLatin","stripAnyThingButDigits","repeatStr","n","r","i","NumberInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","readValuesFromProps","value","valueToShow","mapValue","numberFormat","selectionStart","undefined","selectionEnd","handleKeyDown","event","keyCode","preventDefault","updateState","deleteValue","target","updateValue","key","hideKeyboard","ctrlKey","metaKey","inputRef","current","blur","handlePaste","enteredValue","clipboardData","window","getData","handleInput","values","recheckValue","newState","forceFireChange","fireOnChangeInTheEnd","document","activeElement","setSelectionRange","fireOnChange","element","enteredValueMapped","maxLength","length","substring","qty","onChange","name","ref","getInputRef","React","createRef","nextProps","nextState","shallowEqualObjects","style","className","_this$props","rest","onInput","onPast","onKeyDown","pattern","inputMode","type","defaultValue","objectWithoutProperties","react_default","a","createElement","assign","dir","onPaste","Component","DecimalInput","defaultThousandSeparator","defaultDecimalSeparator","asString","Number","updateElementValue","negate","stripAnyThingButNumber","firstHyphenIndex","indexOf","mapDecimalSeparator","decimalSeparatorRegex","decimalSeparator","_this$values","valueIsValid","currentValue","valueBeforeCursor","valueAfterCursor","countThousandSeparator","stripThousandSeparator","separated","addThousandSeparator","valueToShowWithSeparator","checkValue","alreadFoundDecimalSeparator","alreadyPassedDecimalSeparator","groupCount","c","charAt","thousandSeparator","match","thousandSeparatorRegex","numberRegex","RegExp","concat","CARD_SEPERATOR","SEPERATORES_REGEX","MATCH_REGEX","EMPTY_VALUE","CardNumberInput","readCardNumberFromValue","latinNumberValue","valueWithNoSeperator","match4Digit","readValues","isValueValidCardNumber","handleFocus","isValueEmpty","jumpTo","onFocus","handleBlur","onBlur","jumpToNext","whereTheCaretIs","whereIsCaret","jumpToPrevious","section","caretPosition","shiftKey","Math","abs","onShowDialog","valueFromClipboard","inputValue","seperatorBefore","lastIndexOf","seperatorAfter","floor","resetValues","newValues","objectSpread","nextSeperator","previousValue","emptyValue","bind","assertThisInitialized","Example","state","Number1","Number2","Number3","color","bgColor","Tel1","value1","handleChange","t","setState","console","log","handleValueChange","substr","toggleColor","toggleBgColor","interval","setInterval","clearInterval","backgroundColor","Fragment","autoComplete","width","placeholder","lib_NumberInput","lib_DecimalInput","lib_CardNumberInput","onClick","render","margin","src_Example_0","getElementById"],"mappings":"+OAAaA,EAAsB,QACtBC,EAAsB,QAE5B,SAASC,EAAWC,GACzB,OAAIA,EACGA,EAAIC,WAAWC,QAAQ,iBAAkB,SAAAC,GAAC,OAAIC,OAAOC,aAAaF,EAAEG,WAAW,GAAK,QAD3EN,EAIX,SAASO,EAAWP,GACzB,OAAIA,EACGA,EAAIC,WAAWC,QAAQ,mEAAkB,SAAAC,GAAC,OAAIC,OAAOC,aAAaF,EAAEG,WAAW,GAAK,QAD3EN,EAIX,SAASQ,EAAuBR,GACrC,OAAIA,EACGA,EAAIC,WAAWC,QAAQ,8EAA6B,IAD3CF,EAqBX,SAASS,EAAUT,EAAKU,GAE7B,IADA,IAAIC,EAAI,GACAC,EAAE,EAAGA,EAAEF,EAAGE,IAChBD,GAAKX,EAEP,OAAOW,MCsPME,cAtOb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,oBAAsB,SAACR,GACrB,IAAMS,EAAQT,EAAMS,OAAS,GAG7B,MAAO,CACLA,QACAC,YAJkBT,EAAKU,SAASF,EAAOT,EAAMY,cAK7CC,oBAAgBC,EAChBC,kBAAcD,IApBCb,EAwBnBe,cAAgB,SAACC,GAEI,IAAhBA,EAAMC,SACPD,EAAME,iBACNlB,EAAKmB,YAAYnB,EAAKoB,YAAYJ,EAAMK,QAAS,KAC1B,KAAhBL,EAAMC,SACbD,EAAME,iBACNlB,EAAKmB,YAAYnB,EAAKoB,YAAYJ,EAAMK,OAAQ,KACzCL,EAAMC,SAAS,IAAMD,EAAMC,SAAS,IAC3CD,EAAME,iBAENlB,EAAKmB,YAAYnB,EAAKsB,YAAYN,EAAMK,QAASL,EAAMC,QAAU,IAAI/B,WAAYc,EAAKD,MAAMY,gBACrFK,EAAMC,SAAS,IAAMD,EAAMC,SAAS,KAC3CD,EAAME,iBAENlB,EAAKmB,YAAYnB,EAAKsB,YAAYN,EAAMK,QAASL,EAAMC,QAAU,IAAI/B,WAAYc,EAAKD,MAAMY,gBACrFK,EAAMO,KAAK,UAAOP,EAAMO,KAAK,UACpCP,EAAME,iBAENlB,EAAKmB,YAAYnB,EAAKsB,YAAYN,EAAMK,OAAQL,EAAMO,IAAKvB,EAAKD,MAAMY,gBAC/DK,EAAMC,SAAS,IAAMD,EAAMC,SAAS,IACpB,IAAhBD,EAAMC,UACU,KAAhBD,EAAMC,QACbjB,EAAKwB,iBACGR,EAAMS,UAAWT,EAAMU,SAA6B,KAAhBV,EAAMC,SAAgC,KAAhBD,EAAMC,YAChED,EAAMS,SAAWT,EAAMU,UAA6B,KAAhBV,EAAMC,UAC1CD,EAAMS,SAAWT,EAAMU,UAA6B,KAAhBV,EAAMC,UAC1CD,EAAMS,SAAWT,EAAMU,UAA6B,KAAhBV,EAAMC,UAC1CD,EAAMS,SAAWT,EAAMU,UAA6B,KAAhBV,EAAMC,SAC3CD,EAAMC,SAAS,KAAOD,EAAMC,SAAS,KACrB,MAAhBD,EAAMC,SAKbD,EAAME,oBA3DSlB,EA+DnBwB,aAAe,WACbxB,EAAK2B,SAASC,QAAQC,QAhEL7B,EAmEnB8B,YAAc,SAACd,GACbA,EAAME,iBAEN,IAAMa,EAAetC,GAAwBuB,EAAMgB,eAAiBC,OAAOD,eAAeE,QAAQ,SAElGlC,EAAKmB,YAAYnB,EAAKsB,YAAYN,EAAMK,OAAQU,EAAc/B,EAAKD,MAAMY,gBAxExDX,EA2EnBmC,YAAc,SAACnB,GACb,GAAGhB,EAAKoC,OAAO3B,cAAcO,EAAMK,OAAOb,MAA1C,CAEA,IAAMuB,EAAetC,EAAuBuB,EAAMK,OAAOb,OAEzDR,EAAKmB,YAAYnB,EAAKqC,aAAarB,EAAMK,OAAQU,EAAc/B,EAAKD,MAAMY,eAAe,KAhFxEX,EAmFnBU,SAAW,SAACF,EAAOG,GACjB,OAAGA,IAAe7B,EACTE,EAAWwB,GACXG,IAAe5B,EACfS,EAAWgB,GAEbxB,EAAWwB,IAzFDR,EA6FnBmB,YAAc,SAACmB,EAAUC,GACvB,GAAID,EAAJ,CAEAtC,EAAKoC,OAASE,EACd,IAAIE,GAAuB,EACxBxC,EAAK2B,SAASC,QAAQpB,QAAUR,EAAKoC,OAAO3B,cAC7C+B,GAAuB,EACvBxC,EAAK2B,SAASC,QAAQpB,MAAQR,EAAKoC,OAAO3B,aAEzCT,EAAK2B,SAASC,UAAUa,SAASC,eAElC1C,EAAK2B,SAASC,QAAQe,kBAAkB3C,EAAKoC,OAAOxB,eAAgBZ,EAAKoC,OAAOtB,eAI/E0B,GAAwBD,IACzBvC,EAAK4C,iBA7GU5C,EAiHnBsB,YAAc,SAACuB,EAASd,EAAcpB,GACpC,IAAMmC,EAAqB9C,EAAKU,SAASqB,EAAcpB,GACnDF,EAAcoC,EAAQrC,MACtBI,EAAiBiC,EAAQjC,eACzBE,EAAe+B,EAAQ/B,aAE3B,KAAGd,EAAKD,MAAMgD,WAAatC,EAAYuC,OAASjB,EAAaiB,OAAShD,EAAKD,MAAMgD,WAWjF,OAPAtC,EAAcA,EAAYwC,UAAU,EAAGrC,GAAkBkC,EAAqBrC,EAAYwC,UAAUnC,GAGpGA,EADAF,GAAkBkC,EAAmBE,OAK9B,CACLxC,MAHYhB,EAAWiB,GAIvBA,cACAG,iBACAE,iBAtIed,EA0InBqC,aAAe,SAACQ,EAASd,EAAcpB,GACrC,IAAIF,EAAcT,EAAKU,SAASqB,EAAcpB,GAC1CC,EAAiBiC,EAAQjC,eACzBE,EAAe+B,EAAQ/B,aAI3B,MAAO,CACLN,MAHYhB,EAAWiB,GAIvBA,cACAG,iBACAE,iBArJed,EAyJnBoB,YAAc,SAACyB,EAASK,GACtB,IAAIzC,EAAcoC,EAAQrC,MACtBI,EAAiBiC,EAAQjC,eACzBE,EAAe+B,EAAQ/B,aAI3B,GAAGF,IAAiBE,EAClB,GAAGoC,EAAM,EAAG,CACV,GAAoB,IAAjBtC,EAAoB,OACvBH,EAAcA,EAAYwC,UAAU,EAAGrC,EAAiBsC,GAAOzC,EAAYwC,UAAUnC,GACrFF,GAAkBsC,MACf,CACH,GAAGpC,IAAeL,EAAYuC,OAAQ,OACtCvC,EAAcA,EAAYwC,UAAU,EAAGrC,GAAkBH,EAAYwC,UAAUnC,EAAaoC,QAG9FzC,EAAcA,EAAYwC,UAAU,EAAGrC,GAAkBH,EAAYwC,UAAUnC,GAOjF,OAJAA,EAAeF,EAIR,CACLJ,MAHYhB,EAAWiB,GAIvBA,cACAG,iBACAE,iBArLed,EAyLnB4C,aAAe,WACV5C,EAAKD,MAAMoD,UACZnD,EAAKD,MAAMoD,SAAS,CAAC9B,OAAQ,CAAC+B,KAAMpD,EAAKD,MAAMqD,KAAM5C,MAAOR,EAAKoC,OAAO5B,UAzL1E,IAAI6C,EAAMtD,EAAM4B,UAAY5B,EAAMuD,YAFjB,OAGdD,GAAsB,oBAARA,IACfA,EAAMA,KAERrD,EAAK2B,SAAW0B,GAAYE,IAAMC,YAGlCxD,EAAKoC,OAASpC,EAAKO,oBAAoBR,GATtBC,qFA+LGyD,EAAWC,GAI/B,OAHGD,EAAUjD,QAAUL,KAAKiC,OAAO5B,OAASiD,EAAU9C,eAAiBR,KAAKJ,MAAMY,cAChFR,KAAKgB,YAAYhB,KAAKI,oBAAoBkD,KAExCE,IAAoBF,EAAUG,MAAOzD,KAAKJ,MAAM6D,SAGjDH,EAAUI,YAAc1D,KAAKJ,MAAM8D,YACpC1D,KAAKwB,SAASC,QAAQiC,UAAYJ,EAAUI,YAEvC,oCAGA,IAAAC,EAC0I3D,KAAKJ,MAAbgE,GADlID,EACAtD,MADAsD,EACOX,SADPW,EACiBE,QADjBF,EAC0BG,OAD1BH,EACkCI,UADlCJ,EAC6CK,QAD7CL,EACsDM,UADtDN,EACiEO,KADjEP,EACuET,IADvES,EAC4EnC,SAD5EmC,EACsFR,YADtFQ,EACmGnD,aADnGmD,EACiHQ,aADjHrE,OAAAsE,EAAA,EAAAtE,CAAA6D,EAAA,gJAEArD,EAAeN,KAAKiC,OAApB3B,YAKP,OACE+D,EAAAC,EAAAC,cAAA,QAAAzE,OAAA0E,OAAA,CACEtB,IAAKlD,KAAKwB,SACV0C,KAAM,MAGNO,IAAK,MAELN,aAAc7D,EACdyD,UAAW/D,KAAKY,cAChB8D,QAAS1E,KAAK2B,YACdkC,QAAS7D,KAAKgC,aACV4B,WAjRce,aC4bXC,cA/Xb,SAAAA,EAAYhF,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4E,IACjB/E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8E,GAAAzE,KAAAH,KAAMJ,KAgBRiF,yBAA2B,WACzB,MAAO,KAlBUhF,EAqBnBiF,wBAA0B,WACxB,MAAO,KAtBUjF,EAyBnBO,oBAAsB,SAACR,GACrB,GAAGA,EAAMS,MAAM,CACb,IAAMA,EAAQT,EAAMS,MAAQT,EAAMmF,SAAWnF,EAAMS,MAAQ2E,OAAOpF,EAAMS,YAASK,EACjF,OAAOb,EAAKsB,YAAY,GAAI,EAAG,EAAGd,EAAOT,EAAMY,aAAcZ,EAAMmF,UAGrE,MAAO,CACL1E,WAAOK,EACPJ,YAAa,GACbG,oBAAgBC,EAChBC,kBAAcD,IAnCCb,EAuCnBe,cAAgB,SAACC,GAEI,IAAhBA,EAAMC,SACPD,EAAME,iBACNlB,EAAKmB,YAAYnB,EAAKoB,YAAYJ,EAAMK,QAAS,EAAGrB,EAAKD,MAAMmF,YACxC,KAAhBlE,EAAMC,SACbD,EAAME,iBACNlB,EAAKmB,YAAYnB,EAAKoB,YAAYJ,EAAMK,OAAQ,EAAGrB,EAAKD,MAAMmF,YACvDlE,EAAMC,SAAS,IAAMD,EAAMC,SAAS,IAC3CD,EAAME,iBAENlB,EAAKmB,YAAYnB,EAAKoF,mBAAmBpE,EAAMK,QAASL,EAAMC,QAAU,IAAI/B,WAAYc,EAAKD,MAAMY,aAAcX,EAAKD,MAAMmF,YACrHlE,EAAMC,SAAS,IAAMD,EAAMC,SAAS,KAC3CD,EAAME,iBAENlB,EAAKmB,YAAYnB,EAAKoF,mBAAmBpE,EAAMK,QAASL,EAAMC,QAAU,IAAI/B,WAAYc,EAAKD,MAAMY,aAAcX,EAAKD,MAAMmF,YACrHlE,EAAMO,KAAK,UAAOP,EAAMO,KAAK,UACpCP,EAAME,iBAENlB,EAAKmB,YAAYnB,EAAKoF,mBAAmBpE,EAAMK,OAAQL,EAAMO,IAAKvB,EAAKD,MAAMY,aAAcX,EAAKD,MAAMmF,YACnF,MAAZlE,EAAMO,KAA6B,MAAhBP,EAAMC,SAChCD,EAAME,iBACNlB,EAAKmB,YAAYnB,EAAKoF,mBAAmBpE,EAAMK,OAAQ,IAAKrB,EAAKD,MAAMY,aAAcX,EAAKD,MAAMmF,YAC7E,MAAZlE,EAAMO,KAA6B,MAAhBP,EAAMC,SAChCD,EAAME,iBACNlB,EAAKmB,YAAYnB,EAAKqF,WACfrE,EAAMC,SAAS,IAAMD,EAAMC,SAAS,IACpB,IAAhBD,EAAMC,UACU,KAAhBD,EAAMC,QACbjB,EAAKwB,iBACGR,EAAMS,UAAWT,EAAMU,SAA6B,KAAhBV,EAAMC,SAAgC,KAAhBD,EAAMC,YAChED,EAAMS,SAAWT,EAAMU,UAA6B,KAAhBV,EAAMC,UAC1CD,EAAMS,SAAWT,EAAMU,UAA6B,KAAhBV,EAAMC,UAC1CD,EAAMS,SAAWT,EAAMU,UAA6B,KAAhBV,EAAMC,UAC1CD,EAAMS,SAAWT,EAAMU,UAA6B,KAAhBV,EAAMC,SAC3CD,EAAMC,SAAS,KAAOD,EAAMC,SAAS,KACrB,MAAhBD,EAAMC,SAKbD,EAAME,oBAhFSlB,EAoFnBwB,aAAe,WACbxB,EAAK2B,SAASC,QAAQC,QArFL7B,EAwFnB8B,YAAc,SAACd,GACbA,EAAME,iBAEN,IAAIa,EAAe/B,EAAKsF,wBAAwBtE,EAAMgB,eAAiBC,OAAOD,eAAeE,QAAQ,SACxE,KAA1BlC,EAAKoC,OAAO3B,cACbsB,EAAeA,EAAa5C,QAAQ,OAAQ,KAG9Ca,EAAKmB,YAAYnB,EAAKoF,mBAAmBpE,EAAMK,OAAQU,EAAc/B,EAAKD,MAAMY,aAAcX,EAAKD,MAAMmF,YAhGxFlF,EAmGnBmC,YAAc,SAACnB,GACb,GAAGhB,EAAKoC,OAAO3B,cAAcO,EAAMK,OAAOb,MAA1C,CAEA,IAAMuB,EAAe/B,EAAKsF,uBAAuBtE,EAAMK,OAAOb,OAExD+E,EAAmBxD,EAAayD,QAAQ,KAE9C,GAD0BzD,EAAayD,QAAQ,IAAKD,EAAmB,IAC/C,GAAKA,EAAmB,EAC9CvF,EAAKmB,YAAYnB,EAAKqF,cACnB,CACH,IAAMzE,EAAiBI,EAAMK,OAAOT,eAC9BE,EAAeE,EAAMK,OAAOP,aAC5BwB,EAAWtC,EAAKsB,YAAY,GAAIV,EAAgBE,EAAciB,EAAc/B,EAAKD,MAAMY,aAAcX,EAAKD,MAAMmF,UACtHlF,EAAKmB,YAAYmB,GAAU,MAhHZtC,EAoHnBU,SAAW,SAACF,EAAOG,GACjB,OAAGA,IAAe7B,EACTE,EAAWwB,GACXG,IAAe5B,EACfS,EAAWgB,GAEbxB,EAAWwB,IA1HDR,EA6HnByF,oBAAsB,SAACjF,GACrB,OAAOA,EAAMrB,QAAQa,EAAK0F,sBAAuB1F,EAAK2F,mBA9HrC3F,EAkInBmB,YAAc,SAACmB,EAAUC,GACvB,GAAID,EAAJ,CAEAtC,EAAKoC,OAASE,EACd,IAAIE,GAAuB,EACxBxC,EAAK2B,SAASC,QAAQpB,QAAUR,EAAKoC,OAAO3B,cAC7C+B,GAAuB,EACvBxC,EAAK2B,SAASC,QAAQpB,MAAQR,EAAKoC,OAAO3B,aAEzCT,EAAK2B,SAASC,UAAUa,SAASC,eAElC1C,EAAK2B,SAASC,QAAQe,kBAAkB3C,EAAKoC,OAAOxB,eAAgBZ,EAAKoC,OAAOtB,eAI/E0B,GAAwBD,IACzBvC,EAAK4C,iBAlJU5C,EAsJnBqF,OAAS,WAAM,IAAAO,EAKG5F,EAAKoC,OAJhB5B,EADQoF,EACRpF,MACLC,EAFamF,EAEbnF,YACAoF,EAHaD,EAGbC,aACAjF,EAJagF,EAIbhF,eACAE,EALa8E,EAKb9E,aAEA,GAAGN,EAAQ,EACTA,GAASA,EACTC,EAAc,IAAIA,EAClBG,IACAE,QACI,MAAGN,EAAQ,GAMf,OALAA,GAASA,EACTC,EAAcA,EAAYwC,UAAU,GACpCrC,IACAE,IAKF,MAAO,CACLN,QACAC,cACAoF,eACAjF,iBACAE,iBAhLed,EAoLnBoF,mBAAqB,SAACvC,EAASd,EAAcpB,EAAcuE,GACzD,IAAIY,EAAejD,EAAQrC,MACvBI,EAAiBiC,EAAQjC,eACzBE,EAAe+B,EAAQ/B,aAC3B,OAAOd,EAAKsB,YAAYwE,EAAclF,EAAgBE,EAAciB,EAAcpB,EAAcuE,IAxL/ElF,EA2LnBsB,YAAc,SAACwE,EAAclF,EAAgBE,EAAciB,EAAcpB,EAAcuE,GACrF,IAAMpC,EAAqB9C,EAAKyF,oBAAoBzF,EAAKU,SAASqB,EAAcpB,IAC5EF,EAAcqF,EAEdC,EAAoBtF,EAAYwC,UAAU,EAAGrC,GAC7CoF,EAAmBvF,EAAYwC,UAAUnC,GAE7CF,GAAkBZ,EAAKiG,uBAAuBF,GAI9CtF,GAHAsF,EAAoB/F,EAAKkG,uBAAuBH,IAGdjD,GAFlCkD,EAAmBhG,EAAKkG,uBAAuBF,IAG/CpF,GAAkBkC,EAAmBE,OAErC,IAAMmD,EAAYnG,EAAKoG,qBAAqB3F,EAAaG,GACzDH,EAAc0F,EAAUE,yBAExBvF,EADAF,EAAiBuF,EAAUvF,eAG3B,IACIiF,EADArF,EAAQR,EAAKkG,uBAAuB1G,EAAWiB,IAEnD,GAAGyE,EAAU,CACX,IAAMoB,EAAanB,OAAO3E,GAC1BqF,EAAsC,kBAAfS,QAA0CzF,IAAfyF,GAA2C,OAAfA,OAG9ET,EAAiC,kBADjCrF,EAAQ2E,OAAO3E,UACwCK,IAAVL,GAAiC,OAAVA,EAGtE,MAAO,CACLA,QACAC,cACAoF,eACAjF,iBACAE,iBA7Ned,EAiOnBoB,YAAc,SAACyB,EAASK,EAAKgC,GAC3B,IAAIzE,EAAcoC,EAAQrC,MACtBI,EAAiBiC,EAAQjC,eACzBE,EAAe+B,EAAQ/B,aAI3B,GAAGF,IAAiBE,EAClB,GAAGoC,EAAM,EAAG,CACV,GAAoB,IAAjBtC,EAAoB,OACvB,IAAImF,EAAoBtF,EAAYwC,UAAU,EAAGrC,EAAiBsC,GAC9D8C,EAAmBvF,EAAYwC,UAAUnC,GAE7CF,GAAkBZ,EAAKiG,uBAAuBF,GAI9CtF,GAHAsF,EAAoB/F,EAAKkG,uBAAuBH,KAChDC,EAAmBhG,EAAKkG,uBAAuBF,IAG/CpF,GAAkBsC,MACf,CACH,GAAGpC,IAAeL,EAAYuC,OAAQ,OACtC,IAAI+C,EAAoBtF,EAAYwC,UAAU,EAAGrC,GAC7CoF,EAAmBvF,EAAYwC,UAAUnC,EAAaoC,GAE1DtC,GAAkBZ,EAAKiG,uBAAuBF,GAI9CtF,GAHAsF,EAAoB/F,EAAKkG,uBAAuBH,KAChDC,EAAmBhG,EAAKkG,uBAAuBF,QAI9C,CACH,IAAID,EAAoBtF,EAAYwC,UAAU,EAAGrC,GAC7CoF,EAAmBvF,EAAYwC,UAAUnC,GAE7CF,GAAkBZ,EAAKiG,uBAAuBF,GAI9CtF,GAHAsF,EAAoB/F,EAAKkG,uBAAuBH,KAChDC,EAAmBhG,EAAKkG,uBAAuBF,IAKjD,IAAMG,EAAYnG,EAAKoG,qBAAqB3F,EAAaG,GACzDH,EAAc0F,EAAUE,yBAExBvF,EADAF,EAAiBuF,EAAUvF,eAG3B,IACIiF,EADArF,EAAQR,EAAKkG,uBAAuB1G,EAAWiB,IAEnD,GAAGyE,EAAU,CACX,IAAMoB,EAAanB,OAAO3E,GAC1BqF,EAAsC,kBAAfS,QAA0CzF,IAAfyF,GAA2C,OAAfA,OAG9ET,EAAiC,kBADjCrF,EAAQ2E,OAAO3E,UACwCK,IAAVL,GAAiC,OAAVA,EAItE,MAAO,CACLA,QACAC,cACAoF,eACAjF,iBACAE,iBA/Red,EAoSnBoG,qBAAuB,SAAC3F,EAAaG,GAKnC,IAJA,IAAIyF,EAA2B,GAC3BE,GAA8B,EAC9BC,GAAgF,IAAhD/F,EAAY+E,QAAQxF,EAAK2F,kBACzDc,EAAa,EACR5G,EAAIY,EAAYuC,OAAO,EAAGnD,GAAG,EAAGA,IAAI,CAC3C,IAAM6G,EAAIjG,EAAYkG,OAAO9G,GAC1B6G,IAAI1G,EAAK2F,iBACNY,EAMC1G,GAAKe,GACNA,KANF2F,GAA8B,EAC9BF,EAA2BK,EAAIL,EAC/BG,GAAgC,EAChCC,EAAa,IAOZD,GAA8C,IAAbC,GAAsB,MAAJC,IACpDL,EAA2BrG,EAAK4G,kBAAoBP,EACpDI,EAAa,EACV5G,EAAEe,EAAe,GAClBA,KAGJyF,EAA2BK,EAAIL,EAC/BI,KAGJ,MAAO,CAACJ,2BAA0BzF,mBAlUjBZ,EAqUnBiG,uBAAyB,SAACzF,GACxB,OAAQA,EAAMqG,MAAM7G,EAAK8G,yBAA2B,IAAI9D,QAtUvChD,EAyUnBkG,uBAAyB,SAAC1F,GACxB,OAAOA,EAAMrB,QAAQa,EAAK8G,uBAAwB,KA1UjC9G,EA6UnBsF,uBAAyB,SAACrG,GACxB,OAAIA,EACGA,EAAIC,WAAWC,QAAQa,EAAK+G,YAAa,IADhC9H,GA9UCe,EAkVnB4C,aAAe,WACV5C,EAAKD,MAAMoD,UACZnD,EAAKD,MAAMoD,SAAS,CAAC9B,OAAQ,CAAC+B,KAAMpD,EAAKD,MAAMqD,KAAM5C,MAAOR,EAAKoC,OAAO5B,UAlV1E,IAAI6C,EAAMtD,EAAM4B,UAAY5B,EAAMuD,YAFjB,OAGdD,GAAsB,oBAARA,IACfA,EAAMA,KAERrD,EAAK2B,SAAW0B,GAAYE,IAAMC,YAGlCxD,EAAK4G,kBAAoB7G,EAAM6G,mBAAqB5G,EAAKgF,2BACzDhF,EAAK2F,iBAAmB5F,EAAM4F,kBAAoB3F,EAAKiF,0BACvDjF,EAAK8G,uBAAyB,IAAIE,OAAJ,IAAAC,OAAejH,EAAK4G,kBAApB,KAA0C,KACxE5G,EAAK0F,sBAAwB,IAAIsB,OAAJ,KAAAC,OAAgBjH,EAAK2F,iBAArB,KAA0C,KACvE3F,EAAK+G,YAAc,IAAIC,OAAJ,6EAAAC,OAAsCjH,EAAK2F,iBAA3C,KAAgE,MACnF3F,EAAKoC,OAASpC,EAAKO,oBAAoBR,GAdtBC,qFAwVGyD,EAAWC,GAI/B,OAHGD,EAAUjD,QAAUL,KAAKiC,OAAO5B,OAASiD,EAAU9C,eAAiBR,KAAKJ,MAAMY,cAChFR,KAAKgB,YAAYhB,KAAKI,oBAAoBkD,KAExCE,IAAoBF,EAAUG,MAAOzD,KAAKJ,MAAM6D,SAGjDH,EAAUI,YAAc1D,KAAKJ,MAAM8D,YACpC1D,KAAKwB,SAASC,QAAQiC,UAAYJ,EAAUI,YAEvC,oCAGA,IAAAC,EACoJ3D,KAAKJ,MAAbgE,GAD5ID,EACAtD,MADAsD,EACOX,SADPW,EACiBE,QADjBF,EAC0BG,OAD1BH,EACkCI,UADlCJ,EAC6CK,QAD7CL,EACsDM,UADtDN,EACiEO,KADjEP,EACuET,IADvES,EAC4EnC,SAD5EmC,EACsFR,YADtFQ,EACmGnD,aADnGmD,EACiHQ,aADjHR,EAC+HoB,SAD/HjF,OAAAsE,EAAA,EAAAtE,CAAA6D,EAAA,2JAEArD,EAAeN,KAAKiC,OAApB3B,YAKP,OACE+D,EAAAC,EAAAC,cAAA,QAAAzE,OAAA0E,OAAA,CACEtB,IAAKlD,KAAKwB,SACV0C,KAAM,MAGNO,IAAK,MAELN,aAAc7D,EACdyD,UAAW/D,KAAKY,cAChB8D,QAAS1E,KAAK2B,YACdkC,QAAS7D,KAAKgC,aACV4B,WArbee,4BCDrBoC,EAAkB,IAClBC,EAAoB,IAAIH,OAAJ,KAAAC,OAAgBC,EAAhB,KAAmC,KACvDE,EAAc,IAAIJ,OAAJ,YAAAC,OAAuBC,EAAvB,cAAAD,OAAkDC,EAAlD,cAAAD,OAA6EC,EAA7E,cACdG,EAAW,OAAAJ,OAAUC,EAAV,QAAAD,OAA+BC,EAA/B,QAAAD,OAAoDC,EAApD,QAmeFI,cAlbb,SAAAA,EAAYvH,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmH,IACjBtH,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqH,GAAAhH,KAAAH,KAAMJ,KAkBRwH,wBAA0B,SAAC/G,GACzB,GAAIA,EAAJ,CAEA,IAAMgH,EAAmBhI,EAAWgB,GAE9BqG,EAAQW,EAAiBX,MADjB,yDAEd,GAAGA,EAAM,CACP,IAAMY,EAAuBZ,EAAM,GAAG1H,QAAQ,WAAY,IAC1D,SAAA8H,OAAUQ,EAAqBxE,UAAU,EAAG,IAA5CgE,OAAiDC,GAAjDD,OAAkEQ,EAAqBxE,UAAU,EAAG,IAApGgE,OAAyGC,GAAzGD,OAA0HQ,EAAqBxE,UAAU,EAAG,KAA5JgE,OAAkKC,GAAlKD,OAAmLQ,EAAqBxE,UAAU,GAAI,KAGxN,IACMyE,EAAcF,EAAiBX,MADhB,YAElBa,GACD1H,EAAKmB,YAAYnB,EAAKsB,YAAYtB,EAAK2B,SAASC,QAAS8F,EAAY,GAAI1H,EAAKD,MAAMY,iBAjCrEX,EAuCnB2H,WAAa,SAACnH,GAIZ,MAAO,CACLA,QACAC,YALkBT,EAAKU,SAASF,EAAOR,EAAKD,MAAMY,cAMlDkF,aALmB7F,EAAK4H,uBAAuBpH,GAM/CI,oBAAgBC,EAChBC,kBAAcD,IAhDCb,EAwDnB6H,YAAc,SAAC7G,GACVhB,EAAK8H,aAAa9H,EAAKoC,OAAO5B,QAC/BR,EAAK+H,OAAO,GAEX/H,EAAKD,MAAMiI,SACZhI,EAAKD,MAAMiI,QAAQhH,IA7DJhB,EAiEnBiI,WAAa,SAACjH,GACThB,EAAKD,MAAMmI,QACZlI,EAAKD,MAAMmI,OAAOlH,IAnEHhB,EAuEnBmI,WAAa,WACX,IAAMvH,EAAiBZ,EAAK2B,SAASC,QAAQhB,eACvCwH,EAAkBpI,EAAKqI,aAAazH,GAE1C,OAAGwH,EAAkB,IACnBpI,EAAK+H,OAAOK,EAAkB,IACvB,IA7EQpI,EAkFnBsI,eAAiB,WACf,IAAM1H,EAAiBZ,EAAK2B,SAASC,QAAQhB,eACvCwH,EAAkBpI,EAAKqI,aAAazH,GAE1C,OAAGwH,EAAkB,IACnBpI,EAAK+H,OAAOK,EAAkB,IACvB,IAxFQpI,EA6FnB8H,aAAe,SAACtH,GACd,MAA0C,KAAvCA,EAAMrB,QAAQgI,EAAmB,KA9FnBnH,EAqGnB+H,OAAS,SAACQ,GACR,IAAMC,EAAgC,GAAfD,EAAU,GACjCvI,EAAKoC,OAAOxB,eAAiB4H,EAC7BxI,EAAKoC,OAAOtB,aAAe0H,EAC3BxI,EAAK2B,SAASC,QAAQe,kBAAkB3C,EAAKoC,OAAOxB,eAAgBZ,EAAKoC,OAAOtB,eAzG/Dd,EA4GnBe,cAAgB,SAACC,GAEf,GAAmB,IAAhBA,EAAMC,QACPD,EAAME,iBACNlB,EAAKmB,YAAYnB,EAAKoB,YAAYJ,EAAMK,QAAS,SAC7C,GAAmB,KAAhBL,EAAMC,QACbD,EAAME,iBACNlB,EAAKmB,YAAYnB,EAAKoB,YAAYJ,EAAMK,OAAQ,SAC5C,GAAGL,EAAMC,SAAS,IAAMD,EAAMC,SAAS,GAC3CD,EAAME,iBAENlB,EAAKmB,YAAYnB,EAAKsB,YAAYN,EAAMK,QAASL,EAAMC,QAAU,IAAI/B,WAAYc,EAAKD,MAAMY,oBACxF,GAAGK,EAAMC,SAAS,IAAMD,EAAMC,SAAS,IAC3CD,EAAME,iBAENlB,EAAKmB,YAAYnB,EAAKsB,YAAYN,EAAMK,QAASL,EAAMC,QAAU,IAAI/B,WAAYc,EAAKD,MAAMY,oBACxF,GAAGK,EAAMO,KAAK,UAAOP,EAAMO,KAAK,SACpCP,EAAME,iBAENlB,EAAKmB,YAAYnB,EAAKsB,YAAYN,EAAMK,OAAQL,EAAMO,IAAKvB,EAAKD,MAAMY,oBAClE,GAAe,MAAZK,EAAMO,KAAyB,MAAZP,EAAMO,KAAyB,MAAZP,EAAMO,KAAyB,MAAZP,EAAMO,KAAyB,MAAZP,EAAMO,KAElE,MAAhBP,EAAMC,SAAiC,MAAhBD,EAAMC,SAAiC,MAAhBD,EAAMC,SAAiC,MAAhBD,EAAMC,QAElFD,EAAME,iBACHF,EAAMS,SAAWT,EAAMyH,UAAYzH,EAAMU,SAAuB,MAAZV,EAAMO,IAC3DvB,EAAKsI,iBAELtI,EAAKmI,kBAEH,GAAGnH,EAAMC,SAAS,IAAMD,EAAMC,SAAS,SACvC,GAAmB,IAAhBD,EAAMC,QAAY,CACzB,GAAGyH,KAAKC,IAAI3I,EAAK2B,SAASC,QAAQhB,eAAiBZ,EAAK2B,SAASC,QAAQd,gBAAgBd,EAAK2B,SAASC,QAAQpB,MAAMwC,OACnH,OAEChC,EAAMS,SAAWT,EAAMyH,UAAYzH,EAAMU,QACvC1B,EAAKsI,kBAAkBtH,EAAME,iBAE7BlB,EAAKmI,cAAcnH,EAAME,sBAEP,KAAhBF,EAAMC,QACbjB,EAAKwB,iBACGR,EAAMS,UAAWT,EAAMU,SAA6B,KAAhBV,EAAMC,SAAgC,KAAhBD,EAAMC,YAChED,EAAMS,SAAWT,EAAMU,UAA6B,KAAhBV,EAAMC,UAC1CD,EAAMS,SAAWT,EAAMU,UAA6B,KAAhBV,EAAMC,UAC1CD,EAAMS,SAAWT,EAAMU,UAA6B,KAAhBV,EAAMC,UAC3B,MAAhBD,EAAMC,QACVjB,EAAKD,MAAM6I,eACZ5H,EAAME,iBACNlB,EAAKD,MAAM6I,gBAEN5H,EAAMC,SAAS,KAAOD,EAAMC,SAAS,MACrB,MAAhBD,EAAMC,SAEbjB,EAAKoC,OAAOxB,eAAiBZ,EAAK2B,SAASC,QAAQhB,eACnDZ,EAAKoC,OAAOtB,aAAed,EAAK2B,SAASC,QAAQd,cAOjDE,EAAME,qBA1KSlB,EA8KnBwB,aAAe,WACbxB,EAAK2B,SAASC,QAAQC,QA/KL7B,EAkLnB8B,YAAc,SAACd,GACbA,EAAME,iBAEN,IAAM2H,EAAqB7I,EAAKuH,yBAAyBvG,EAAMgB,eAAiBC,OAAOD,eAAeE,QAAQ,SAC9G,GAAI2G,EAAJ,CAEA,IAAMzG,EAASpC,EAAK2H,WAAWkB,GAE5BzG,EAAOyD,cACR7F,EAAKmB,YAAYiB,KA3LFpC,EA+LnBmC,YAAc,SAACnB,GAEb,GADAA,EAAME,iBACHlB,EAAKoC,OAAO3B,cAAcO,EAAMK,OAAOb,MAA1C,CACA,IHzOsCvB,EGyOhC6J,EAAa9H,EAAMK,OAAOb,MAI7BR,EAAK2B,SAASC,QAAQpB,QAAUR,EAAKoC,OAAO3B,cAC7CT,EAAK2B,SAASC,QAAQpB,MAAQR,EAAKoC,OAAO3B,YAC1CT,EAAK2B,SAASC,QAAQe,kBAAkB3C,EAAKoC,OAAOxB,eAAgBZ,EAAKoC,OAAOtB,iBH/O5C7B,EGkPV6J,GHjPvBtD,QAAQ,MAAM,GAClBvG,EAAIuG,QAAQ,MAAM,GAElBvG,EAAIuG,QAAQ,MAAM,GAClBvG,EAAIuG,QAAQ,MAAM,GAClBvG,EAAIuG,QAAQ,MAAM,GAClBvG,EAAIuG,QAAQ,MAAM,GAClBvG,EAAIuG,QAAQ,MAAM,GAClBvG,EAAIuG,QAAQ,WAAM,IG0OjBxF,EAAKmI,eA5MUnI,EAqNnBU,SAAW,SAACF,EAAOG,GACjB,OAAGA,IAAe7B,EACDE,EAAWwB,GAEnBG,IAAe5B,EACPS,EAAWgB,GAGbxB,EAAWwB,IA7NTR,EAkOnBmB,YAAc,SAACmB,GACb,GAAIA,EAAJ,CAEAtC,EAAKoC,OAASE,OAEgBzB,IAA3Bb,EAAKoC,OAAOyD,eACb7F,EAAKoC,OAAOyD,aAAe7F,EAAK4H,uBAAuB5H,EAAKoC,OAAO5B,QAGrE,IAAIgC,GAAuB,EAExBxC,EAAK2B,SAASC,QAAQpB,QAAUR,EAAKoC,OAAO3B,cAC7C+B,GAAuB,EACvBxC,EAAK2B,SAASC,QAAQpB,MAAQR,EAAKoC,OAAO3B,aAEzCT,EAAK2B,SAASC,UAAUa,SAASC,eAElC1C,EAAK2B,SAASC,QAAQe,kBAAkB3C,EAAKoC,OAAOxB,eAAgBZ,EAAKoC,OAAOtB,cAI/E0B,GACDxC,EAAK4C,iBAxPU5C,EA4PnBsB,YAAc,SAACuB,EAASd,EAAcpB,GACpC,IAAMmC,EAAqB9C,EAAKU,SAASqB,EAAcpB,GACnDF,EAAcoC,EAAQrC,MACT,KAAdC,IACDA,EAAc4G,GAEhB,IAAIzG,EAAiBiC,EAAQjC,eACzBE,EAAe+B,EAAQ/B,aAE3BL,EAAcA,EAAYwC,UAAU,EAAGrC,GAAkBkC,EAAqBrC,EAAYwC,UAAUnC,GACpGF,GAAkBkC,EAAmBE,OAErC,IAAM+F,EAAkBtI,EAAYuI,YAAY9B,EAAgBtG,EAAiB,GAAK,EAClFqI,EAAiBxI,EAAY+E,QAAQ0B,EAAgBtG,IACpC,IAAlBqI,IAAqBA,EAAiBxI,EAAYuC,QAClDiG,EAAiBF,EAAkB,IACjCnI,EAAiBmI,GAAmB,GACrCtI,EAAcA,EAAYwC,UAAU,EAAG8F,GAAmBtI,EAAYwC,UAAUrC,EAAiB,EAAGA,GAAkBH,EAAYwC,UAAUgG,GAC5IrI,EAAiBmI,EAAkB,GAEnCtI,EAAcA,EAAYwC,UAAU,EAAG8F,EAAkB,GAAKtI,EAAYwC,UAAUgG,IAMxF,IAAMzI,EAAQhB,EAAWiB,GACnBoF,EAAe7F,EAAK4H,uBAAuBpH,GAejD,OAbGI,EAAiBH,EAAYuC,QAAUxC,EAAMyC,UAAUrC,EAAiB,EAAGA,GAAgBiG,MAAM,aAClGjG,IAIa,CACbJ,QACAC,cACAoF,eACAjF,iBACAE,aAPFA,EAAeF,IA5REZ,EA4SnBqI,aAAe,SAACzH,GACd,OAAO8H,KAAKQ,MAAMtI,EAAiB,GAAK,GA7SvBZ,EAmTnB4H,uBAAyB,SAACpH,GACxB,QAAIA,KACDA,EAAMqG,MAAMO,IArTEpH,EAyTnBmJ,YAAc,WAEZ,MAAO,CACL3I,MAFY,GAGZC,YAAaT,EAAKU,SAHN,GAGsBV,EAAKD,MAAMY,cAC7CkF,cAAc,EACdjF,eAAgB,EAChBE,aAAc,IAhUCd,EAoUnBoB,YAAc,SAACyB,EAASK,GACtB,IAAIzC,EAAcoC,EAAQrC,MACtBI,EAAiBiC,EAAQjC,eACzBE,EAAe+B,EAAQ/B,aAE3B,GAAGF,IAAiBE,EAAa,CAC/B,GAAGoC,EAAM,EAAG,CACV,GAAoB,IAAjBtC,EAAoB,OACvB,GAAGH,EAAYwC,UAAUrC,EAAiBsC,EAAKtC,KAAkBsG,EAAgB,CAC/E,IAAMkC,EAASnJ,OAAAoJ,EAAA,EAAApJ,CAAA,GAAOD,EAAKoC,QAG3B,OAFAgH,EAAUxI,iBACVwI,EAAUtI,eACHsI,EAET3I,EAAcA,EAAYwC,UAAU,EAAGrC,EAAiBsC,GAAOzC,EAAYwC,UAAUnC,GACrFF,GAAkBsC,MACf,CACH,GAAGpC,IAAeL,EAAYuC,OAAQ,OACtC,GAAGvC,EAAYwC,UAAUrC,EAAgBA,EAAiBsC,KAAOgE,EAAgB,OACjFzG,EAAcA,EAAYwC,UAAU,EAAGrC,GAAkBH,EAAYwC,UAAUnC,EAAaoC,GAE9F,IAAMoG,EAAgB7I,EAAY+E,QAAQ0B,EAAgBtG,IACtC,IAAjB0I,EACD7I,GAA4B,IAE5BA,EAAcA,EAAYwC,UAAU,EAAGqG,GAAgB5J,EAAU,IAAKgJ,KAAKC,IAAIzF,IAAOzC,EAAYwC,UAAUqG,QAG3G7I,EAAYwC,UAAUrC,EAAgBE,GAAc0E,QAAQ0B,IAAiB,GAC9EzG,EAAc,GACdG,EAAiB,GAEjBH,EAAcA,EAAYwC,UAAU,EAAGrC,GAAiBlB,EAAU,IAAKoB,EAAaF,GAAiBH,EAAYwC,UAAUnC,GAI/HA,EAAeF,EAEf,IAAMJ,EAAQhB,EAAWiB,GAWzB,MARe,CACbD,QACAC,cACAoF,aALmB7F,EAAK4H,uBAAuBpH,GAM/CI,iBACAE,iBAlXed,EAwXnB4C,aAAe,WACb,GAAG5C,EAAKD,MAAMoD,SAAS,CACrB,IAAM3C,EAAQR,EAAKoC,OAAO5B,MAC1B,GAAGR,EAAKuJ,gBAAkB/I,EAAM,CAC9BR,EAAKuJ,cAAgB/I,EACrB,IAAMa,EAAS,CACb+B,KAAMpD,EAAKD,MAAMqD,KACjB5C,MAAOR,EAAKoC,OAAO5B,MACnBqF,aAAc7F,EAAKoC,OAAOyD,cAE5B7F,EAAKD,MAAMoD,SAAS,CAAC9B,cAhYzBrB,EAAKwJ,WAAaxJ,EAAKwJ,WAAWC,KAAhBxJ,OAAAyJ,EAAA,EAAAzJ,CAAAD,IAElB,IAAIqD,EAAMtD,EAAM4B,UAAY5B,EAAMuD,YAJjB,OAKdD,GAAsB,oBAARA,IACfA,EAAMA,KAERrD,EAAK2B,SAAW0B,GAAYE,IAAMC,YAGlCxD,EAAKoC,OAASpC,EAAK2H,WAAW5H,EAAMS,OACpCR,EAAKuJ,cAAgBvJ,EAAKoC,OAAO5B,MAZhBR,4EAqDjBG,KAAKgB,YAAYhB,KAAKgJ,6DAkVF1F,EAAWC,GAI/B,OAHGD,EAAUjD,QAAUL,KAAKiC,OAAO5B,OAASiD,EAAU9C,eAAiBR,KAAKJ,MAAMY,cAChFR,KAAKgB,YAAYhB,KAAKwH,WAAWlE,EAAUjD,SAEzCmD,IAAoBF,EAAUG,MAAOzD,KAAKJ,MAAM6D,SAGjDH,EAAUI,YAAc1D,KAAKJ,MAAM8D,YACpC1D,KAAKwB,SAASC,QAAQiC,UAAYJ,EAAUI,YAEvC,oCAGA,IAAAC,EACoK3D,KAAKJ,MAAbgE,GAD5JD,EACAtD,MADAsD,EACOX,SADPW,EACiBkE,QADjBlE,EAC0BoE,OAD1BpE,EACkCE,QADlCF,EAC2CG,OAD3CH,EACmDI,UADnDJ,EAC8D8E,aAD9D9E,EAC4EK,QAD5EL,EACqFM,UADrFN,EACgGO,KADhGP,EACsGnC,SADtGmC,EACgHR,YADhHQ,EAC6HnD,aAD7HmD,EAC2IQ,aAD3IrE,OAAAsE,EAAA,EAAAtE,CAAA6D,EAAA,4KAEArD,EAAeN,KAAKiC,OAApB3B,YAKP,OACE+D,EAAAC,EAAAC,cAAA,QAAAzE,OAAA0E,OAAA,CACEtB,IAAKlD,KAAKwB,SACV0C,KAAM,MAGNO,IAAK,MAELN,aAAc7D,EACdyD,UAAW/D,KAAKY,cAChB8D,QAAS1E,KAAK2B,YACdkC,QAAS7D,KAAKgC,YACd6F,QAAS7H,KAAK0H,YACdK,OAAQ/H,KAAK8H,YACTlE,WAvdkBe,aCkIf6E,oNAvIbC,MAAQ,CACNC,QAAS,GACTC,QAAS,MACTC,QAAS,IACTC,OAAO,EACPC,SAAS,EACTC,KAAM,OACNC,OAAQ,MAYVC,aAAe,SAACpJ,GACd,IAAMsB,EAAW,GACX+H,EAAIrJ,EAAMK,OAEhBiB,EAAS+H,EAAEjH,MAAQiH,EAAE7J,MACrBR,EAAKsK,SAAShI,EAAU,WACtBiI,QAAQC,IAAI,QAASxK,EAAK4J,YAI9Ba,kBAAoB,SAACzJ,GACnB,IAAMsB,EAAW,GACX+H,EAAIrJ,EAAMK,OAEhBiB,EAAS+H,EAAEjH,KAAKsH,OAAO,EAAG,IAAML,EAAE7J,MAClCR,EAAKsK,SAAShI,EAAU,WACtBiI,QAAQC,IAAI,QAASxK,EAAK4J,YAI9Be,YAAc,WACZ3K,EAAKsK,SAAS,CACZN,OAAQhK,EAAK4J,MAAMI,WAIvBY,cAAgB,WACd5K,EAAKsK,SAAS,CACZL,SAAUjK,EAAK4J,MAAMK,8FApCvB9J,KAAK0K,SAAWC,YAAY3K,KAAKyK,cAAe,KAChDzK,KAAK0K,SAAWC,YAAY3K,KAAKwK,YAAa,oDAI9CI,cAAc5K,KAAK0K,2CAoCnB,IAAMhH,EAAY1D,KAAKyJ,MAAMI,MAAQ,MAAQ,GACvCpG,EAAQzD,KAAKyJ,MAAMK,QAAU,CAACe,gBAAiB,QAAU,GAG/D,OACExG,EAAAC,EAAAC,cAACF,EAAAC,EAAMwG,SAAP,KACEzG,EAAAC,EAAAC,cAAA,QAAMwG,aAAa,MACnB1G,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,gGACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOL,KAAK,OAAOjB,KAAK,gBAAgBQ,MAAO,CAACuH,MAAO,KAAM3K,MAAOL,KAAKyJ,MAAMC,QAAS1G,SAAUhD,KAAKsK,kBAAoBW,YAAY,yKAEzI5G,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6EAEEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2G,EAAD,CAAajI,KAAK,UAAUS,UAAWA,EAAWD,MAAOA,EAAOpD,MAAOL,KAAKyJ,MAAMC,QAAS1G,SAAUhD,KAAKiK,aAAcgB,YAAY,0BAGxI5G,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6EAEEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2G,EAAD,CAAajI,KAAK,UAAUS,UAAWA,EAAWD,MAAOA,EAAOpD,MAAOL,KAAKyJ,MAAME,QAASnJ,aAAc5B,EAAqBoE,SAAUhD,KAAKiK,aAAcgB,YAAY,0BAG3K5G,EAAAC,EAAAC,cAAA,8CACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOL,KAAK,OAAOjB,KAAK,gBAAgBQ,MAAO,CAACuH,MAAO,KAAM3K,MAAOL,KAAKyJ,MAAME,QAAS3G,SAAUhD,KAAKsK,kBAAmBW,YAAY,mGAExI5G,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uEAEEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4G,EAAD,CAAclI,KAAK,UAAUS,UAAWA,EAAWD,MAAOA,EAAOpD,MAAOL,KAAKyJ,MAAMG,QAAS7E,UAAU,EAAMvE,aAAc7B,EAAqBqE,SAAUhD,KAAKiK,aAAcgB,YAAY,0BAG5L5G,EAAAC,EAAAC,cAAA,8CACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOL,KAAK,OAAOjB,KAAK,gBAAgBQ,MAAO,CAACuH,MAAO,KAAM3K,MAAOL,KAAKyJ,MAAMG,QAAS5G,SAAUhD,KAAKsK,kBAAmBW,YAAY,mGAExI5G,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sGAEEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2G,EAAD,CAAahH,KAAK,MAAMjB,KAAK,OAAOS,UAAWA,EAAWD,MAAOA,EAAOpD,MAAOL,KAAKyJ,MAAMM,KAAM/G,SAAUhD,KAAKiK,aAAcrH,UAAW,GAAIqI,YAAY,0BAG5J5G,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,sGACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC6G,EAAD,CACE/K,MAAOL,KAAKyJ,MAAMO,OAClB/G,KAAM,SACNS,UAAWA,EACXD,MAAOA,EACPT,SAAUhD,KAAKiK,aACfgB,YAAY,4DACd5G,EAAAC,EAAAC,cAAA,WATJ,iCAWIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOL,KAAK,OAAOjB,KAAK,SAASwB,IAAK,MAAOpE,MAAOL,KAAKyJ,MAAMO,OAAQhH,SAAUhD,KAAKiK,gBAExF5F,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQ8G,QAASrL,KAAKwK,aAAtB,oBACAnG,EAAAC,EAAAC,cAAA,UAAQ8G,QAASrL,KAAKyK,eAAtB,gBACApG,EAAAC,EAAAC,cAAA,SAAOL,KAAK,oBAjIES,cCetB2G,iBAAOjH,EAAAC,EAAAC,cAhBK,kBACVF,EAAAC,EAAAC,cAAA,OAAKE,IAAK,MAAOhB,MAAO,CAAEuH,MAAO,IAAKO,OAAQ,cAC5ClH,EAAAC,EAAAC,cAAA,qEACAF,EAAAC,EAAAC,cAAA,WAFF,kEAGEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,0IACAF,EAAAC,EAAAC,cAAA,6SACAF,EAAAC,EAAAC,cAAA,uRACAF,EAAAC,EAAAC,cAAA,0QAGFF,EAAAC,EAAAC,cAACiH,EAAD,QAKG,MAASlJ,SAASmJ,eAAe","file":"static/js/main.1f125194.chunk.js","sourcesContent":["export const NUMBER_FORMAT_FARSI = 'FARSI';\nexport const NUMBER_FORMAT_LATIN = 'LATIN';\n\nexport function mapToFarsi(str) {\n  if(!str) return str;\n  return str.toString().replace(/[1234567890]/gi, e => String.fromCharCode(e.charCodeAt(0) + 1728))\n}\n\nexport function mapToLatin(str) {\n  if(!str) return str;\n  return str.toString().replace(/[۱۲۳۴۵۶۷۸۹۰]/gi, e => String.fromCharCode(e.charCodeAt(0) - 1728))\n}\n\nexport function stripAnyThingButDigits(str) {\n  if(!str) return str;\n  return str.toString().replace(/[^1234567890۱۲۳۴۵۶۷۸۹۰]/gi, '');\n}\n\nexport function hasStringACharToGoToNext (str) {\n  if(str.indexOf('.')>=0) return true;\n  if(str.indexOf(',')>=0) return true;\n  // if(str.indexOf('/')>=0) return true;\n  if(str.indexOf('-')>=0) return true;\n  if(str.indexOf(';')>=0) return true;\n  if(str.indexOf('*')>=0) return true;\n  if(str.indexOf('#')>=0) return true;\n  if(str.indexOf(' ')>=0) return true;\n  if(str.indexOf('،')>=0) return true;\n  return false;\n}\n\n/**\n * @param {string} str\n * @param {number} n\n */\nexport function repeatStr(str, n){\n  let r = '';\n  for(let i=0; i<n; i++){\n    r += str;\n  }\n  return r;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shallowEqualObjects from 'shallow-equal/objects';\n\nimport { mapToFarsi, mapToLatin, stripAnyThingButDigits, NUMBER_FORMAT_FARSI, NUMBER_FORMAT_LATIN} from './util';\n\nclass NumberInput extends Component {\n\n  static propTypes = {\n    /**\n     * The ref to pass on the input, if empty it will be created internally\n     */\n    inputRef: PropTypes.any,\n    getInputRef: PropTypes.any,\n    /**\n     * The name that will be set while firing the onChange event in the target object\n     */\n    name: PropTypes.string,\n    /**\n     * Callback function that is fired when the cart number value changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Disables the number input.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * makes the number input readonly.\n     */\n    readOnly: PropTypes.bool,\n    /**\n     * accepted number digit count.\n     */\n    maxLength: PropTypes.number,\n    /**\n     * Callback function that is fired when a click event occurs on the input.\n     */\n    onClick: PropTypes.func,\n    /**\n     * Callback function that is fired when the input gains focus.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Sets the value for the number input.\n     */\n    value: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n    let ref = props.inputRef || props.getInputRef;\n    if(ref && typeof ref === 'function'){\n      ref = ref();\n    }\n    this.inputRef = ref ? ref : React.createRef();\n    // this.rr = React.createRef();\n\n    this.values = this.readValuesFromProps(props);\n  }\n\n  readValuesFromProps = (props) => {\n    const value = props.value || '';\n    const valueToShow = this.mapValue(value, props.numberFormat);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart: undefined,\n      selectionEnd: undefined,\n    };\n  };\n\n  handleKeyDown = (event) => {\n    // console.log('keyCode: ', event.keyCode, 'key: ', event.key);\n    if(event.keyCode===8) { //backspace\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, -1));\n    }else if(event.keyCode===46){ //delete\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, 1));\n    }else if(event.keyCode>=48 && event.keyCode<=57){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, (event.keyCode - 48).toString(), this.props.numberFormat));\n    }else if(event.keyCode>=96 && event.keyCode<=105){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, (event.keyCode - 96).toString(), this.props.numberFormat));\n    }else if(event.key>='۰' && event.key<='۹'){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, event.key, this.props.numberFormat));\n    }else if(event.keyCode>=35 && event.keyCode<=40){ //arrows\n    }else if(event.keyCode===9){ //tab\n    }else if(event.keyCode===13){ //return\n      this.hideKeyboard();\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===67 || event.keyCode===86)){ //copy/paste\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===82)){ //refresh key\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===82)){ //refresh key\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===73)){ //inspector\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===65)){ //select all\n    }else if(event.keyCode>=112 && event.keyCode<=123){ // All other F keys\n    }else if(event.keyCode===229){ //android bug workaround\n    }else{\n      // console.log('other');\n      // console.log('keyCode: ', event.keyCode, 'key: ', event.key, 'ctrlKey: ', event.ctrlKey);\n      // this.rr.current.innerText = `keyCode: ${event.keyCode} key:  ${event.key} ctrlKey: ${event.ctrlKey}`;\n      event.preventDefault();\n    }\n  };\n\n  hideKeyboard = () => {\n    this.inputRef.current.blur();\n  }\n\n  handlePaste = (event) => {\n    event.preventDefault();\n\n    const enteredValue = stripAnyThingButDigits((event.clipboardData || window.clipboardData).getData('text'));\n\n    this.updateState(this.updateValue(event.target, enteredValue, this.props.numberFormat));\n  };\n\n  handleInput = (event) => {\n    if(this.values.valueToShow===event.target.value) return;\n\n    const enteredValue = stripAnyThingButDigits(event.target.value);\n\n    this.updateState(this.recheckValue(event.target, enteredValue, this.props.numberFormat), true);\n  };\n\n  mapValue = (value, numberFormat) => {\n    if(numberFormat===NUMBER_FORMAT_FARSI){\n      return mapToFarsi(value);\n    }else if(numberFormat===NUMBER_FORMAT_LATIN){\n      return mapToLatin(value);\n    }\n    return mapToFarsi(value);\n  };\n\n\n  updateState = (newState, forceFireChange) => {\n    if(!newState) return;\n\n    this.values = newState;\n    let fireOnChangeInTheEnd = false;\n    if(this.inputRef.current.value !== this.values.valueToShow){\n      fireOnChangeInTheEnd = true;\n      this.inputRef.current.value = this.values.valueToShow;\n    }\n    if(this.inputRef.current===document.activeElement){\n      // console.log('has focus :D');\n      this.inputRef.current.setSelectionRange(this.values.selectionStart, this.values.selectionEnd);\n    }else{\n      // console.log('has not focus :(');\n    }\n    if(fireOnChangeInTheEnd || forceFireChange){\n      this.fireOnChange();\n    }\n  };\n\n  updateValue = (element, enteredValue, numberFormat) => {\n    const enteredValueMapped = this.mapValue(enteredValue, numberFormat);\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    if(this.props.maxLength && valueToShow.length + enteredValue.length > this.props.maxLength){\n      return;\n    }\n\n    valueToShow = valueToShow.substring(0, selectionStart) + enteredValueMapped + valueToShow.substring(selectionEnd);\n\n    selectionStart += enteredValueMapped.length;\n    selectionEnd = selectionStart;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  recheckValue = (element, enteredValue, numberFormat) => {\n    let valueToShow = this.mapValue(enteredValue, numberFormat);\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  deleteValue = (element, qty) => {\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    // console.log({selectionStart, selectionEnd})\n\n    if(selectionStart===selectionEnd){\n      if(qty < 0) {\n        if(selectionStart===0) return;\n        valueToShow = valueToShow.substring(0, selectionStart + qty) + valueToShow.substring(selectionEnd);\n        selectionStart += qty;\n      }else{\n        if(selectionEnd===valueToShow.length) return;\n        valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd+qty);\n      }\n    }else{\n      valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd);\n    }\n\n    selectionEnd = selectionStart;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  fireOnChange = () => {\n    if(this.props.onChange){\n      this.props.onChange({target: {name: this.props.name, value: this.values.value}});\n    }\n  };\n\n  shouldComponentUpdate(nextProps, nextState){\n    if(nextProps.value !== this.values.value || nextProps.numberFormat !== this.props.numberFormat){\n      this.updateState(this.readValuesFromProps(nextProps));\n    }\n    if(!shallowEqualObjects(nextProps.style, this.props.style)){\n      return true;\n    }\n    if(nextProps.className !== this.props.className){\n      this.inputRef.current.className = nextProps.className;\n    }\n    return false;\n  }\n\n  render() {\n    const {value, onChange, onInput, onPast, onKeyDown, pattern, inputMode, type, ref, inputRef, getInputRef, numberFormat, defaultValue, ...rest} = this.props;\n    const {valueToShow} = this.values;\n\n    // const localInputMode = this.props.type === 'tel' ? 'tel' : 'numeric'; // as we use type=tel, then we do not need it any more\n    // const localPattern = '[0-9]*'; // it has problem with the form checking, as we insert persian digit, it is not acceptable for the browser\n\n    return (\n      <input\n        ref={this.inputRef}\n        type={\"tel\"} // I tried to use text and using inputMode, but it does not work on Safari\n        // inputMode={localInputMode}\n        // xInputMode={localnputMode} // in firefox OS it is x-inputmode, I do not know how to handle it\n        dir={\"ltr\"}\n        // pattern={localPattern}\n        defaultValue={valueToShow}\n        onKeyDown={this.handleKeyDown}\n        onPaste={this.handlePaste}\n        onInput={this.handleInput}\n        {...rest}\n      />\n      );\n    //<p ref={this.rr} type={\"text\"}>empty</p></div>\n\n  }\n}\nexport default NumberInput;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shallowEqualObjects from 'shallow-equal/objects';\n\nimport { mapToFarsi, mapToLatin, NUMBER_FORMAT_FARSI, NUMBER_FORMAT_LATIN} from './util';\n\nclass DecimalInput extends Component {\n\n  static propTypes = {\n    /**\n     * The ref to pass on the input, if empty it will be created internally\n     */\n    inputRef: PropTypes.any,\n    getInputRef: PropTypes.any,\n    /**\n     * The name that will be set while firing the onChange event in the target object\n     */\n    name: PropTypes.string,\n    /**\n     * Callback function that is fired when the cart number value changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Disables the decimal input.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * makes the decimal input readonly.\n     */\n    readOnly: PropTypes.bool,\n    /**\n     * Callback function that is fired when a click event occurs on the input.\n     */\n    onClick: PropTypes.func,\n    /**\n     * Callback function that is fired when the input gains focus.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Sets the value for the decimal input.\n     */\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    /**\n     * Sets the thousand separator\n     */\n    thousandSeparator: PropTypes.string,\n    /**\n     * Sets the decimal separator\n     */\n    decimalSeparator: PropTypes.string,\n    /**\n     * makes the value string, it is useful for big decimals.\n     */\n    asString: PropTypes.bool,\n  };\n\n  constructor(props) {\n    super(props);\n    let ref = props.inputRef || props.getInputRef;\n    if(ref && typeof ref === 'function'){\n      ref = ref();\n    }\n    this.inputRef = ref ? ref : React.createRef();\n    // this.rr = React.createRef();\n\n    this.thousandSeparator = props.thousandSeparator || this.defaultThousandSeparator();\n    this.decimalSeparator = props.decimalSeparator || this.defaultDecimalSeparator();\n    this.thousandSeparatorRegex = new RegExp(`[${this.thousandSeparator}]`, 'g');\n    this.decimalSeparatorRegex = new RegExp(`[.${this.decimalSeparator}]`, 'g');\n    this.numberRegex = new RegExp(`[^-1234567890۱۲۳۴۵۶۷۸۹۰.${this.decimalSeparator}]`, 'gi');\n    this.values = this.readValuesFromProps(props);\n  }\n\n  defaultThousandSeparator = () => {\n    return ',';\n  };\n\n  defaultDecimalSeparator = () => {\n    return '.';\n  };\n\n  readValuesFromProps = (props) => {\n    if(props.value){\n      const value = props.value ? props.asString ? props.value : Number(props.value) : undefined;\n      return this.updateValue('', 0, 0, value, props.numberFormat, props.asString);\n    }\n\n    return {\n      value: undefined,\n      valueToShow: '',\n      selectionStart: undefined,\n      selectionEnd: undefined,\n    };\n  };\n\n  handleKeyDown = (event) => {\n    // console.log('keyCode: ', event.keyCode, 'key: ', event.key);\n    if(event.keyCode===8) { //backspace\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, -1, this.props.asString));\n    }else if(event.keyCode===46){ //delete\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, 1, this.props.asString));\n    }else if(event.keyCode>=48 && event.keyCode<=57){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateElementValue(event.target, (event.keyCode - 48).toString(), this.props.numberFormat, this.props.asString));\n    }else if(event.keyCode>=96 && event.keyCode<=105){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateElementValue(event.target, (event.keyCode - 96).toString(), this.props.numberFormat, this.props.asString));\n    }else if(event.key>='۰' && event.key<='۹'){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateElementValue(event.target, event.key, this.props.numberFormat, this.props.asString));\n    }else if(event.key==='.' || event.keyCode===190){ //point\n      event.preventDefault();\n      this.updateState(this.updateElementValue(event.target, '.', this.props.numberFormat, this.props.asString));\n    }else if(event.key==='-' || event.keyCode===189){ // -\n      event.preventDefault();\n      this.updateState(this.negate());\n    }else if(event.keyCode>=35 && event.keyCode<=40){ //arrows\n    }else if(event.keyCode===9){ //tab\n    }else if(event.keyCode===13){ //return\n      this.hideKeyboard();\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===67 || event.keyCode===86)){ //copy/paste\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===82)){ //refresh key\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===82)){ //refresh key\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===73)){ //inspector\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===65)){ //select all\n    }else if(event.keyCode>=112 && event.keyCode<=123){ // All other F keys\n    }else if(event.keyCode===229){ //android bug workaround\n    }else{\n      // console.log('other');\n      // console.log('keyCode: ', event.keyCode, 'key: ', event.key, 'ctrlKey: ', event.ctrlKey);\n      // this.rr.current.innerText = `keyCode: ${event.keyCode} key:  ${event.key} ctrlKey: ${event.ctrlKey}`;\n      event.preventDefault();\n    }\n  };\n\n  hideKeyboard = () => {\n    this.inputRef.current.blur();\n  }\n\n  handlePaste = (event) => {\n    event.preventDefault();\n\n    let enteredValue = this.stripAnyThingButNumber((event.clipboardData || window.clipboardData).getData('text'));\n    if(this.values.valueToShow!==''){\n      enteredValue = enteredValue.replace(/[-]/g, '');\n    }\n\n    this.updateState(this.updateElementValue(event.target, enteredValue, this.props.numberFormat, this.props.asString));\n  };\n\n  handleInput = (event) => {\n    if(this.values.valueToShow===event.target.value) return;\n\n    const enteredValue = this.stripAnyThingButNumber(event.target.value);\n\n    const firstHyphenIndex = enteredValue.indexOf('-');\n    const secondHyphenIndex = enteredValue.indexOf('-', firstHyphenIndex + 1);\n    if(secondHyphenIndex >= 0 || firstHyphenIndex > 0){\n      this.updateState(this.negate());\n    }else{\n      const selectionStart = event.target.selectionStart;\n      const selectionEnd = event.target.selectionEnd;\n      const newState = this.updateValue('', selectionStart, selectionEnd, enteredValue, this.props.numberFormat, this.props.asString);\n      this.updateState(newState, true);\n    }\n  };\n\n  mapValue = (value, numberFormat) => {\n    if(numberFormat===NUMBER_FORMAT_FARSI){\n      return mapToFarsi(value);\n    }else if(numberFormat===NUMBER_FORMAT_LATIN){\n      return mapToLatin(value);\n    }\n    return mapToFarsi(value);\n  };\n\n  mapDecimalSeparator = (value) => {\n    return value.replace(this.decimalSeparatorRegex, this.decimalSeparator);\n  };\n\n\n  updateState = (newState, forceFireChange) => {\n    if(!newState) return;\n\n    this.values = newState;\n    let fireOnChangeInTheEnd = false;\n    if(this.inputRef.current.value !== this.values.valueToShow){\n      fireOnChangeInTheEnd = true;\n      this.inputRef.current.value = this.values.valueToShow;\n    }\n    if(this.inputRef.current===document.activeElement){\n      // console.log('has focus :D');\n      this.inputRef.current.setSelectionRange(this.values.selectionStart, this.values.selectionEnd);\n    }else{\n      // console.log('has not focus :(');\n    }\n    if(fireOnChangeInTheEnd || forceFireChange){\n      this.fireOnChange();\n    }\n  };\n\n  negate = () => {\n    let {value,\n    valueToShow,\n    valueIsValid,\n    selectionStart,\n    selectionEnd} = this.values;\n\n    if(value > 0) {\n      value = -value;\n      valueToShow = '-'+valueToShow;\n      selectionStart++;\n      selectionEnd++;\n    }else if(value < 0) {\n      value = -value;\n      valueToShow = valueToShow.substring(1);\n      selectionStart--;\n      selectionEnd--;\n    }else{\n      return;\n    }\n\n    return {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  updateElementValue = (element, enteredValue, numberFormat, asString) => {\n    let currentValue = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n    return this.updateValue(currentValue, selectionStart, selectionEnd, enteredValue, numberFormat, asString);\n  }\n\n  updateValue = (currentValue, selectionStart, selectionEnd, enteredValue, numberFormat, asString) => {\n    const enteredValueMapped = this.mapDecimalSeparator(this.mapValue(enteredValue, numberFormat));\n    let valueToShow = currentValue;\n\n    let valueBeforeCursor = valueToShow.substring(0, selectionStart);\n    let valueAfterCursor = valueToShow.substring(selectionEnd);\n\n    selectionStart -= this.countThousandSeparator(valueBeforeCursor);\n    valueBeforeCursor = this.stripThousandSeparator(valueBeforeCursor);\n    valueAfterCursor = this.stripThousandSeparator(valueAfterCursor);\n\n    valueToShow = valueBeforeCursor + enteredValueMapped + valueAfterCursor;\n    selectionStart += enteredValueMapped.length;\n\n    const separated = this.addThousandSeparator(valueToShow, selectionStart);\n    valueToShow = separated.valueToShowWithSeparator;\n    selectionStart = separated.selectionStart;\n    selectionEnd = selectionStart;\n\n    let value = this.stripThousandSeparator(mapToLatin(valueToShow));\n    let valueIsValid;\n    if(asString) {\n      const checkValue = Number(value);\n      valueIsValid = (typeof checkValue === 'number' || checkValue === undefined || checkValue === null);\n    }else{\n      value = Number(value);\n      valueIsValid = (typeof value === 'number' || value === undefined || value === null);\n    }\n\n    return {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  deleteValue = (element, qty, asString) => {\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    // console.log({selectionStart, selectionEnd})\n\n    if(selectionStart===selectionEnd){\n      if(qty < 0) {\n        if(selectionStart===0) return;\n        let valueBeforeCursor = valueToShow.substring(0, selectionStart + qty);\n        let valueAfterCursor = valueToShow.substring(selectionEnd);\n    \n        selectionStart -= this.countThousandSeparator(valueBeforeCursor);\n        valueBeforeCursor = this.stripThousandSeparator(valueBeforeCursor);\n        valueAfterCursor = this.stripThousandSeparator(valueAfterCursor);\n    \n        valueToShow = valueBeforeCursor + valueAfterCursor;\n        selectionStart += qty;\n      }else{\n        if(selectionEnd===valueToShow.length) return;\n        let valueBeforeCursor = valueToShow.substring(0, selectionStart);\n        let valueAfterCursor = valueToShow.substring(selectionEnd+qty);\n    \n        selectionStart -= this.countThousandSeparator(valueBeforeCursor);\n        valueBeforeCursor = this.stripThousandSeparator(valueBeforeCursor);\n        valueAfterCursor = this.stripThousandSeparator(valueAfterCursor);\n    \n        valueToShow = valueBeforeCursor + valueAfterCursor;\n      }\n    }else{\n      let valueBeforeCursor = valueToShow.substring(0, selectionStart);\n      let valueAfterCursor = valueToShow.substring(selectionEnd);\n  \n      selectionStart -= this.countThousandSeparator(valueBeforeCursor);\n      valueBeforeCursor = this.stripThousandSeparator(valueBeforeCursor);\n      valueAfterCursor = this.stripThousandSeparator(valueAfterCursor);\n  \n      valueToShow = valueBeforeCursor + valueAfterCursor;\n    }\n\n    const separated = this.addThousandSeparator(valueToShow, selectionStart);\n    valueToShow = separated.valueToShowWithSeparator;\n    selectionStart = separated.selectionStart;\n    selectionEnd = selectionStart;\n\n    let value = this.stripThousandSeparator(mapToLatin(valueToShow));\n    let valueIsValid;\n    if(asString) {\n      const checkValue = Number(value);\n      valueIsValid = (typeof checkValue === 'number' || checkValue === undefined || checkValue === null);\n    }else{\n      value = Number(value);\n      valueIsValid = (typeof value === 'number' || value === undefined || value === null);\n    }\n\n\n    return {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n\n  addThousandSeparator = (valueToShow, selectionStart) => {\n    let valueToShowWithSeparator = '';\n    let alreadFoundDecimalSeparator = false;\n    let alreadyPassedDecimalSeparator = valueToShow.indexOf(this.decimalSeparator) === -1;\n    let groupCount = 0;\n    for (let i = valueToShow.length-1; i>=0; i--){\n      const c = valueToShow.charAt(i);\n      if(c===this.decimalSeparator){\n        if(!alreadFoundDecimalSeparator){\n          alreadFoundDecimalSeparator = true;\n          valueToShowWithSeparator = c + valueToShowWithSeparator;\n          alreadyPassedDecimalSeparator = true;\n          groupCount = 0;\n        }else{\n          if(i <= selectionStart){\n            selectionStart--;\n          }\n        }\n      }else{\n        if(alreadyPassedDecimalSeparator && groupCount===3 && c!=='-'){\n          valueToShowWithSeparator = this.thousandSeparator + valueToShowWithSeparator;\n          groupCount = 0;\n          if(i<selectionStart-1){\n            selectionStart++;\n          }\n        }\n        valueToShowWithSeparator = c + valueToShowWithSeparator;\n        groupCount++;\n      }\n    }\n    return {valueToShowWithSeparator, selectionStart};\n  };\n\n  countThousandSeparator = (value) => {\n    return (value.match(this.thousandSeparatorRegex) || []).length;\n  };\n\n  stripThousandSeparator = (value) => {\n    return value.replace(this.thousandSeparatorRegex, '');\n  };\n\n  stripAnyThingButNumber = (str) => {\n    if(!str) return str;\n    return str.toString().replace(this.numberRegex, '');\n  };\n  \n  fireOnChange = () => {\n    if(this.props.onChange){\n      this.props.onChange({target: {name: this.props.name, value: this.values.value}});\n    }\n  };\n\n  shouldComponentUpdate(nextProps, nextState){\n    if(nextProps.value !== this.values.value || nextProps.numberFormat !== this.props.numberFormat){\n      this.updateState(this.readValuesFromProps(nextProps));\n    }\n    if(!shallowEqualObjects(nextProps.style, this.props.style)){\n      return true;\n    }\n    if(nextProps.className !== this.props.className){\n      this.inputRef.current.className = nextProps.className;\n    }\n    return false;\n  }\n\n  render() {\n    const {value, onChange, onInput, onPast, onKeyDown, pattern, inputMode, type, ref, inputRef, getInputRef, numberFormat, defaultValue, asString, ...rest} = this.props;\n    const {valueToShow} = this.values;\n\n    // const localInputMode = this.props.type === 'tel' ? 'tel' : 'numeric'; // as we use type=tel, then we do not need it any more\n    // const localPattern = '[0-9]*'; // it has problem with the form checking, as we insert persian digit, it is not acceptable for the browser\n\n    return (\n      <input\n        ref={this.inputRef}\n        type={\"tel\"} // I tried to use text and using inputMode, but it does not work on Safari\n        // inputMode={localInputMode}\n        // xInputMode={localnputMode} // in firefox OS it is x-inputmode, I do not know how to handle it\n        dir={\"ltr\"}\n        // pattern={localPattern}\n        defaultValue={valueToShow}\n        onKeyDown={this.handleKeyDown}\n        onPaste={this.handlePaste}\n        onInput={this.handleInput}\n        {...rest}\n      />\n      );\n    //<p ref={this.rr} type={\"text\"}>empty</p></div>\n\n  }\n}\nexport default DecimalInput;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shallowEqualObjects from 'shallow-equal/objects';\nimport { mapToFarsi, mapToLatin, hasStringACharToGoToNext, repeatStr, NUMBER_FORMAT_FARSI, NUMBER_FORMAT_LATIN} from './util';\n\nconst CARD_SEPERATOR =  '-';\nconst SEPERATORES_REGEX = new RegExp(`[ ${CARD_SEPERATOR}]`, 'g');\nconst MATCH_REGEX = new RegExp(`[0-9]{4}[${CARD_SEPERATOR}][0-9]{4}[${CARD_SEPERATOR}][0-9]{4}[${CARD_SEPERATOR}][0-9]{4}`);\nconst EMPTY_VALUE = `    ${CARD_SEPERATOR}    ${CARD_SEPERATOR}    ${CARD_SEPERATOR}    `;\n\n\nclass CardNumberInput extends Component {\n\n  static propTypes = {\n    /**\n     * The ref to pass on the input, if empty it will be created internally\n     */\n    inputRef: PropTypes.any,\n    getInputRef: PropTypes.any,\n    /**\n     * The name that will be set while firing the onChange event in the target object\n     */\n    name: PropTypes.string,\n    /**\n     * Callback function that is fired when the cart number value changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Disables the card number.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * makes the card number readonly.\n     */\n    readOnly: PropTypes.bool,\n    /**\n     * Callback function that is fired when a click event occurs on the input.\n     */\n    onClick: PropTypes.func,\n    /**\n     * Callback function that is fired when the input gains focus.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Sets the value for the card number input.\n     */\n    value: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n    this.emptyValue = this.emptyValue.bind(this);\n\n    let ref = props.inputRef || props.getInputRef;\n    if(ref && typeof ref === 'function'){\n      ref = ref();\n    }\n    this.inputRef = ref ? ref : React.createRef();\n    // this.rr = React.createRef();\n\n    this.values = this.readValues(props.value);\n    this.previousValue = this.values.value;\n  }\n\n\n  /**\n   * @param {string} value\n   */\n  readCardNumberFromValue = (value) => {\n    if(!value) return;\n\n    const latinNumberValue = mapToLatin(value);\n    const regEx = /[0-9]{4}[^0-9]*[0-9]{4}[^0-9]*[0-9]{4}[^0-9]*[0-9]{4}/;\n    const match = latinNumberValue.match(regEx);\n    if(match){\n      const valueWithNoSeperator = match[0].replace(/[^0-9]*/g, '');\n      return `${valueWithNoSeperator.substring(0, 4)}${CARD_SEPERATOR}${valueWithNoSeperator.substring(4, 8)}${CARD_SEPERATOR}${valueWithNoSeperator.substring(8, 12)}${CARD_SEPERATOR}${valueWithNoSeperator.substring(12, 16)}`;\n    }\n\n    const regEx4Digits = /[0-9]{4}/;\n    const match4Digit = latinNumberValue.match(regEx4Digits);\n    if(match4Digit){\n      this.updateState(this.updateValue(this.inputRef.current, match4Digit[0], this.props.numberFormat));\n      return;\n    }\n\n  }\n    \n  readValues = (value) => {\n    const valueToShow = this.mapValue(value, this.props.numberFormat);\n    const valueIsValid = this.isValueValidCardNumber(value);\n\n    return {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart: undefined,\n      selectionEnd: undefined,\n    };\n  };\n\n  emptyValue() {\n    this.updateState(this.resetValues());\n  };\n\n  handleFocus = (event) => {\n    if(this.isValueEmpty(this.values.value)){\n      this.jumpTo(1);\n    }\n    if(this.props.onFocus){\n      this.props.onFocus(event);\n    }\n  };\n\n  handleBlur = (event) => {\n    if(this.props.onBlur){\n      this.props.onBlur(event);\n    }\n  };\n\n  jumpToNext = () => {\n    const selectionStart = this.inputRef.current.selectionStart;\n    const whereTheCaretIs = this.whereIsCaret(selectionStart);\n\n    if(whereTheCaretIs < 4){\n      this.jumpTo(whereTheCaretIs + 1);\n      return true;\n    }\n    return false;\n  };\n\n  jumpToPrevious = () => {\n    const selectionStart = this.inputRef.current.selectionStart;\n    const whereTheCaretIs = this.whereIsCaret(selectionStart);\n\n    if(whereTheCaretIs > 1){\n      this.jumpTo(whereTheCaretIs - 1);\n      return true;\n    }\n    return false;\n  };\n\n  isValueEmpty = (value) => {\n    if(value.replace(SEPERATORES_REGEX, '')==='') return true;\n    return false;\n  }; \n\n  /**\n   * @param {number} section\n   *  */\n  jumpTo = (section) => {\n    const caretPosition = (section - 1) * 5;\n    this.values.selectionStart = caretPosition;\n    this.values.selectionEnd = caretPosition;\n    this.inputRef.current.setSelectionRange(this.values.selectionStart, this.values.selectionEnd);\n  };\n\n  handleKeyDown = (event) => {\n    // console.log('keyCode: ', event.keyCode, 'key: ', event.key);\n    if(event.keyCode===8) { //backspace\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, -1));\n    }else if(event.keyCode===46){ //delete\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, 1));\n    }else if(event.keyCode>=48 && event.keyCode<=57){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, (event.keyCode - 48).toString(), this.props.numberFormat));\n    }else if(event.keyCode>=96 && event.keyCode<=105){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, (event.keyCode - 96).toString(), this.props.numberFormat));\n    }else if(event.key>='۰' && event.key<='۹'){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, event.key, this.props.numberFormat));\n    }else if(event.key==='.' || event.key==='/' || event.key==='-' || event.key==='*' || event.key==='#' \n             || \n             event.keyCode===188 || event.keyCode===189 || event.keyCode===190 || event.keyCode===191 \n             ){\n      event.preventDefault();\n      if(event.ctrlKey || event.shiftKey || event.metaKey || event.key==='#'){\n        this.jumpToPrevious();\n      }else{\n        this.jumpToNext();\n      }\n    }else if(event.keyCode>=36 && event.keyCode<=40){ //arrows\n    }else if(event.keyCode===9){ //tab\n      if(Math.abs(this.inputRef.current.selectionStart - this.inputRef.current.selectionEnd)===this.inputRef.current.value.length){\n        return;\n      }\n      if(event.ctrlKey || event.shiftKey || event.metaKey){\n        if(this.jumpToPrevious()) event.preventDefault();\n      }else{\n        if(this.jumpToNext()) event.preventDefault();\n      }\n    }else if(event.keyCode===13){ //return\n      this.hideKeyboard();\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===67 || event.keyCode===86)){ //copy/paste\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===82)){ //refresh key\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===73)){ //inspector\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===65)){ //select all\n    }else if(event.keyCode===115){ // F4\n      if(this.props.onShowDialog) {\n        event.preventDefault();\n        this.props.onShowDialog();\n      }\n    }else if(event.keyCode>=112 && event.keyCode<=123){ // All other F keys\n    }else if(event.keyCode===229){ //android bug workaround\n      //K1 : I guess that we have to save the caret position as the input will change it, we need it to know where we have to jump to in handleInput function\n      this.values.selectionStart = this.inputRef.current.selectionStart;\n      this.values.selectionEnd = this.inputRef.current.selectionEnd;\n      //  this.rr.current.innerText = `setting ss to ${this.values.selectionStart}  ${this.values.selectionEnd}`;\n\n    }else{\n      // console.log('other');\n      // console.log('keyCode: ', event.keyCode, 'key: ', event.key, 'ctrlKey: ', event.ctrlKey);\n      //  this.rr.current.innerText = `keyCode: ${event.keyCode} key:  ${event.key} ctrlKey: ${event.ctrlKey}`;\n      event.preventDefault();\n    }\n  };\n\n  hideKeyboard = () => {\n    this.inputRef.current.blur();\n  }\n\n  handlePaste = (event) => {\n    event.preventDefault();\n\n    const valueFromClipboard = this.readCardNumberFromValue((event.clipboardData || window.clipboardData).getData('text'));\n    if(!valueFromClipboard) return;\n\n    const values = this.readValues(valueFromClipboard);\n\n    if(values.valueIsValid){\n      this.updateState(values);\n    }\n  };\n\n  handleInput = (event) => {\n    event.preventDefault();\n    if(this.values.valueToShow===event.target.value) return;\n    const inputValue = event.target.value;\n    // const enteredValue = stripAnyThingButDigits(event.target.value);\n    // this.rr.current.innerText = `V : ${inputValue}`;\n    \n    if(this.inputRef.current.value !== this.values.valueToShow){\n      this.inputRef.current.value = this.values.valueToShow;\n      this.inputRef.current.setSelectionRange(this.values.selectionStart, this.values.selectionEnd);\n    }\n\n    if(hasStringACharToGoToNext(inputValue)){\n      this.jumpToNext();\n    }\n\n    // this.updateState(this.rollbackValue());\n  };\n\n  /**\n   * @param {string} value\n   */\n  mapValue = (value, numberFormat) => {\n    if(numberFormat===NUMBER_FORMAT_FARSI){\n      const mapped = mapToFarsi(value);\n      return mapped;\n    }else if(numberFormat===NUMBER_FORMAT_LATIN){\n      const mapped = mapToLatin(value);\n      return mapped;\n    }\n    const mapped = mapToFarsi(value);\n    return mapped;\n  };\n\n\n  updateState = (newState) => {\n    if(!newState) return;\n\n    this.values = newState;\n\n    if(this.values.valueIsValid===undefined){\n      this.values.valueIsValid = this.isValueValidCardNumber(this.values.value);\n    }\n\n    let fireOnChangeInTheEnd = false;\n    //console.log('values on updateState', this.values)\n    if(this.inputRef.current.value !== this.values.valueToShow){\n      fireOnChangeInTheEnd = true;\n      this.inputRef.current.value = this.values.valueToShow;\n    }\n    if(this.inputRef.current===document.activeElement){\n      // console.log('has focus :D');\n      this.inputRef.current.setSelectionRange(this.values.selectionStart, this.values.selectionEnd);\n    }else{\n      // console.log('has not focus :(');\n    }\n    if(fireOnChangeInTheEnd){\n      this.fireOnChange();\n    }\n  };\n\n  updateValue = (element, enteredValue, numberFormat) => {\n    const enteredValueMapped = this.mapValue(enteredValue, numberFormat);\n    let valueToShow = element.value;\n    if(valueToShow===''){\n      valueToShow = EMPTY_VALUE;\n    }\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    valueToShow = valueToShow.substring(0, selectionStart) + enteredValueMapped + valueToShow.substring(selectionEnd);\n    selectionStart += enteredValueMapped.length;\n\n    const seperatorBefore = valueToShow.lastIndexOf(CARD_SEPERATOR, selectionStart - 1) + 1;\n    let seperatorAfter = valueToShow.indexOf(CARD_SEPERATOR, selectionStart);\n    if(seperatorAfter===-1) seperatorAfter = valueToShow.length;\n    if(seperatorAfter - seperatorBefore > 4) {\n      if(selectionStart - seperatorBefore >= 4){\n        valueToShow = valueToShow.substring(0, seperatorBefore) + valueToShow.substring(selectionStart - 4, selectionStart) + valueToShow.substring(seperatorAfter);\n        selectionStart = seperatorBefore + 4;\n      }else{\n        valueToShow = valueToShow.substring(0, seperatorBefore + 4) + valueToShow.substring(seperatorAfter);\n      }\n    }\n\n\n\n    const value = mapToLatin(valueToShow);\n    const valueIsValid = this.isValueValidCardNumber(value);\n\n    if(selectionStart < valueToShow.length && value.substring(selectionStart - 4, selectionStart).match(/[0-9]{4}/)){\n      selectionStart++;\n    }\n    selectionEnd = selectionStart;\n\n    const values = {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart,\n      selectionEnd,\n    };\n\n    return values; \n  };\n\n  /**\n   * @param {number} selectionStart\n   */\n  whereIsCaret = (selectionStart) => {\n    return Math.floor(selectionStart / 5) + 1;\n  };\n\n  /**\n   * @param {string} value\n   */\n  isValueValidCardNumber = (value) => {\n    if(!value) return false;\n    if(value.match(MATCH_REGEX)) return true;\n    return false;\n  };\n\n  resetValues = () => {\n    const value = '';\n    return {\n      value,\n      valueToShow: this.mapValue(value, this.props.numberFormat),\n      valueIsValid: false,\n      selectionStart: 0,\n      selectionEnd: 0,\n    };\n  };\n\n  deleteValue = (element, qty) => {\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    if(selectionStart===selectionEnd){\n      if(qty < 0) {\n        if(selectionStart===0) return;\n        if(valueToShow.substring(selectionStart + qty, selectionStart)===CARD_SEPERATOR) {\n          const newValues = {...this.values};\n          newValues.selectionStart--;\n          newValues.selectionEnd--;\n          return newValues;\n        }\n        valueToShow = valueToShow.substring(0, selectionStart + qty) + valueToShow.substring(selectionEnd);\n        selectionStart += qty;\n      }else{\n        if(selectionEnd===valueToShow.length) return;\n        if(valueToShow.substring(selectionStart, selectionStart + qty)===CARD_SEPERATOR) return;\n        valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd+qty);\n      }\n      const nextSeperator = valueToShow.indexOf(CARD_SEPERATOR, selectionStart);\n      if(nextSeperator===-1){\n        valueToShow = valueToShow + ' ';\n      }else{\n        valueToShow = valueToShow.substring(0, nextSeperator) +repeatStr(' ', Math.abs(qty))+ valueToShow.substring(nextSeperator);\n      }\n    }else{\n      if(valueToShow.substring(selectionStart, selectionEnd).indexOf(CARD_SEPERATOR)>=0){\n        valueToShow = '';\n        selectionStart = 0;\n      }else {\n        valueToShow = valueToShow.substring(0, selectionStart) +repeatStr(' ', selectionEnd-selectionStart)+ valueToShow.substring(selectionEnd);\n      }\n    }\n\n    selectionEnd = selectionStart;\n\n    const value = mapToLatin(valueToShow);\n    const valueIsValid = this.isValueValidCardNumber(value);\n\n    const values = {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart,\n      selectionEnd,\n    };\n\n    return values; \n  };\n\n  fireOnChange = () => {\n    if(this.props.onChange){\n      const value = this.values.value;\n      if(this.previousValue !== value){\n        this.previousValue = value;\n        const target = {\n          name: this.props.name,\n          value: this.values.value,\n          valueIsValid: this.values.valueIsValid,\n        };\n        this.props.onChange({target});\n      }\n    }\n  };\n\n  shouldComponentUpdate(nextProps, nextState){\n    if(nextProps.value !== this.values.value || nextProps.numberFormat !== this.props.numberFormat){\n      this.updateState(this.readValues(nextProps.value));\n    }\n    if(!shallowEqualObjects(nextProps.style, this.props.style)){\n      return true;\n    }\n    if(nextProps.className !== this.props.className){\n      this.inputRef.current.className = nextProps.className;\n    }\n    return false;\n  }\n\n  render() {\n    const {value, onChange, onFocus, onBlur, onInput, onPast, onKeyDown, onShowDialog, pattern, inputMode, type, inputRef, getInputRef, numberFormat, defaultValue, ...rest} = this.props;\n    const {valueToShow} = this.values;\n\n    // const localInputMode = this.props.type === 'tel' ? 'tel' : 'numeric'; // as we use type=tel, then we do not need it any more\n    // const localPattern = '[0-9]*'; // it has problem with the form checking, as we insert persian digit, it is not acceptable for the browser\n\n    return (\n      <input\n        ref={this.inputRef}\n        type={\"tel\"} // I tried to use text and using inputMode, but it does not work on Safari\n        // inputMode={localInputMode}\n        // xInputMode={localnputMode} // in firefox OS it is x-inputmode, I do not know how to handle it\n        dir={\"ltr\"}\n        // pattern={localPattern}\n        defaultValue={valueToShow}\n        onKeyDown={this.handleKeyDown}\n        onPaste={this.handlePaste}\n        onInput={this.handleInput}\n        onFocus={this.handleFocus}\n        onBlur={this.handleBlur}\n        {...rest}\n      />\n      );\n    //<p ref={this.rr} type={\"text\"}>empty</p></div>\n\n  }\n}\n\n\nexport default CardNumberInput;","import React, { Component } from 'react';\nimport { NumberInput, DecimalInput, CardNumberInput, NUMBER_FORMAT_FARSI } from \"./lib\";\nimport {NUMBER_FORMAT_LATIN} from './lib';\nimport './Example.css';\n\nclass Example extends Component {\n  state = {\n    Number1: '',\n    Number2: '123',\n    Number3: '0',\n    color: false,\n    bgColor: false,\n    Tel1: '0912',\n    value1: '',\n  };\n\n  componentDidMount(){\n    this.interval = setInterval(this.toggleBgColor, 6000);\n    this.interval = setInterval(this.toggleColor, 3000);\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.interval);\n  }\n\n  handleChange = (event) => {\n    const newState = {};\n    const t = event.target;\n\n    newState[t.name] = t.value;\n    this.setState(newState, ()=>{\n      console.log('state', this.state)\n    });\n  };\n\n  handleValueChange = (event) => {\n    const newState = {};\n    const t = event.target;\n\n    newState[t.name.substr(0, 7)] = t.value;\n    this.setState(newState, ()=>{\n      console.log('state', this.state)\n    });\n  };\n\n  toggleColor = () => {\n    this.setState({\n      color: !this.state.color,\n    })\n  };\n\n  toggleBgColor = () => {\n    this.setState({\n      bgColor: !this.state.bgColor,\n    })\n  };\n\n  render(){\n    const className = this.state.color ? \"red\" : \"\";\n    const style = this.state.bgColor ? {backgroundColor: 'aqua'} : {};\n\n\n    return (\n      <React.Fragment>\n        <form autoComplete=\"on\">\n        <div>\n          <br/>\n          <br/>\n          <label>خروجی عدد لاتین\n            <br/>\n            <input type=\"text\" name=\"Number1_value\" style={{width: 250}} value={this.state.Number1} onChange={this.handleValueChange}  placeholder=\"از اینجا کلید تب را چند بار بزنید\" />\n          </label>\n          <br/>\n          <br/>\n          <label>\n            نمونه فارسی\n            <br/>\n            <NumberInput name=\"Number1\" className={className} style={style} value={this.state.Number1} onChange={this.handleChange} placeholder=\"type/paste a number\" />\n          </label>\n        </div>\n        <br/>\n        <div>\n          <label>\n            نمونه لاتین\n            <br/>\n            <NumberInput name=\"Number2\" className={className} style={style} value={this.state.Number2} numberFormat={NUMBER_FORMAT_LATIN} onChange={this.handleChange} placeholder=\"type/paste a number\" />\n          </label>\n        </div>\n        <label>خروجی\n          <br/>\n          <input type=\"text\" name=\"Number2_value\" style={{width: 250}} value={this.state.Number2} onChange={this.handleValueChange} placeholder=\"این فیلد خروجی است\" />\n        </label>\n        <br/>\n        <br/>\n        <br/>\n        <div>\n          <label>\n            عدد اعشاری\n            <br/>\n            <DecimalInput name=\"Number3\" className={className} style={style} value={this.state.Number3} asString={true} numberFormat={NUMBER_FORMAT_FARSI} onChange={this.handleChange} placeholder=\"type/paste a number\" />\n          </label>\n        </div>\n        <label>خروجی\n          <br/>\n          <input type=\"text\" name=\"Number3_value\" style={{width: 250}} value={this.state.Number3} onChange={this.handleValueChange} placeholder=\"این فیلد خروجی است\" />\n        </label>\n        <br/>\n        <br/>\n        <div>\n          <label>\n            نمونه تلفن فارسی\n            <br/>\n            <NumberInput type=\"tel\" name=\"Tel1\" className={className} style={style} value={this.state.Tel1} onChange={this.handleChange} maxLength={12} placeholder=\"type/paste a number\" />\n          </label>\n        </div>\n        <br/>\n        <label>ورودی شماره کارت\n            <br/>\n            <CardNumberInput\n              value={this.state.value1}\n              name={'value1'}\n              className={className} \n              style={style} \n              onChange={this.handleChange}\n              placeholder=\"شماره کارت\" />\n            <br/>\n            خروجی\n            <br/>\n            <input type=\"text\" name=\"value1\" dir={'ltr'} value={this.state.value1} onChange={this.handleChange}/>\n          </label>\n          <br/>\n        <br/>\n        <button onClick={this.toggleColor}>toggle className</button>\n        <button onClick={this.toggleBgColor}>toggle style</button>\n        <input type=\"submit\"/>\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Example;\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport Example from './Example';\n\nconst App = () => (\n  <div dir={\"rtl\"} style={{ width: 640, margin: \"15px auto\" }}>\n    <h1>کمپننت عدد</h1>\n    <br/>ورژن ۱ ساخت ۰\n    <ul>\n      <li>نمایش عدد فارسی یا لاتین</li>\n      <li>ذخیره عدد لاتین، باعث میشود که داده صحیح به سرور داده شود</li>\n      <li>نمایش غیر عدد در صورتی که داده از بیرون به آن وارد شود.</li>\n      <li>نمایش کیبورد عددی در مبایل (غیر از مرورگر سامسونگ) </li>\n    </ul>\n\n    <Example/>\n\n  </div>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}