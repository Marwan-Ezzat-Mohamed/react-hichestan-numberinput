{"version":3,"sources":["lib/NumberInput.js","Example.js","index.js"],"names":["NUMBER_FORMAT_FARSI","NUMBER_FORMAT_LATIN","lib_NumberInput","NumberInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","event","keyCode","preventDefault","updateState","deleteValue","target","updateValue","toString","state","numberFormat","handlePaste","enteredValue","stripAnyThingButDigits","clipboardData","window","getData","handleInput","valueToShow","value","recheckValue","mapValue","mapToFarsi","mapToLatin","newState","setState","fireOnChange","element","enteredValueMapped","selectionStart","selectionEnd","substring","length","qty","onChange","name","handleChange","inputRef","React","createRef","undefined","current","setSelectionRange","_this$props","rest","onInput","onPast","onKeyDown","pattern","inputMode","type","ref","objectWithoutProperties","react_default","a","createElement","assign","onPaste","Component","str","replace","e","String","fromCharCode","charCodeAt","Example","Number1","Number2","t","console","log","Fragment","style","width","placeholder","render","margin","src_Example","document","getElementById"],"mappings":"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","file":"static/js/main.076382e0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport const NUMBER_FORMAT_FARSI = 'FARSI';\nexport const NUMBER_FORMAT_LATIN = 'LATIN';\n\nclass NumberInput extends Component {\n\n\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n\n    const value = props.value || '';\n    const numberFormat = props.numberFormat || NUMBER_FORMAT_FARSI;\n    const valueToShow = this.mapValue(value, numberFormat);\n\n    this.state = {\n      value,\n      valueToShow,\n      numberFormat,\n      selectionStart: undefined,\n      selectionEnd: undefined,\n    };\n  }\n\n  componentDidUpdate() {\n    // console.log('updated');\n    if(this.state.selectionStart || this.state.selectionStart===0)\n      this.inputRef.current.setSelectionRange(this.state.selectionStart, this.state.selectionEnd);\n  }\n\n  handleKeyDown = (event) => {\n    // console.log('keyCode: ', event.keyCode, 'key: ', event.key);\n    if(event.keyCode===8) { //backspace\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, -1));\n    }else if(event.keyCode===46){ //delete\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, 1));\n    }else if(event.keyCode>=48 && event.keyCode<=57){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, (event.keyCode - 48).toString(), this.state.numberFormat));\n    }else if(event.keyCode>=36 && event.keyCode<=40){ //arrows\n    }else if(event.keyCode===229){ //android bug workaround\n    }else{\n      // console.log('other');\n      event.preventDefault();\n    }\n  };\n\n  handlePaste = (event) => {\n    event.preventDefault();\n\n    const enteredValue = stripAnyThingButDigits((event.clipboardData || window.clipboardData).getData('text'));\n\n    this.updateState(this.updateValue(event.target, enteredValue), this.state.numberFormat);\n  };\n\n  handleInput = (event) => {\n    if(this.state.valueToShow===event.target.value) return;\n\n    const enteredValue = stripAnyThingButDigits(event.target.value);\n\n    this.updateState(this.recheckValue(event.target, enteredValue, this.state.numberFormat));\n  };\n\n  mapValue = (value, numberFormat) => {\n    if(numberFormat===NUMBER_FORMAT_FARSI){\n      return mapToFarsi(value);\n    }else if(numberFormat===NUMBER_FORMAT_LATIN){\n      return mapToLatin(value);\n    }\n    return mapToFarsi(value);\n  };\n\n\n  updateState = (newState) => {\n    if(!newState) return;\n\n    this.setState(newState, ()=>{\n      this.fireOnChange();\n    });\n\n  };\n\n  updateValue = (element, enteredValue, numberFormat) => {\n    const enteredValueMapped = this.mapValue(enteredValue, numberFormat);\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    valueToShow = valueToShow.substring(0, selectionStart) + enteredValueMapped + valueToShow.substring(selectionEnd);\n\n    selectionStart += enteredValueMapped.length;\n    selectionEnd = selectionStart;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  recheckValue = (element, enteredValue, numberFormat) => {\n    let valueToShow = this.mapValue(enteredValue, numberFormat);\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  deleteValue = (element, qty) => {\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    // console.log({selectionStart, selectionEnd})\n\n    if(selectionStart===selectionEnd){\n      if(qty < 0) {\n        if(selectionStart===0) return;\n        valueToShow = valueToShow.substring(0, selectionStart + qty) + valueToShow.substring(selectionEnd);\n        selectionStart += qty;\n      }else{\n        if(selectionEnd===valueToShow.length) return;\n        valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd+qty);\n      }\n    }else{\n      valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd);\n    }\n\n    selectionEnd = selectionStart;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  fireOnChange = () => {\n    if(this.props.onChange){\n      this.props.onChange({target: {name: this.props.name, value: this.state.value}});\n    }\n  };\n\n  handleChange = () => {\n    //we do not use the onChange, we use the keyPress and paste instead\n  };\n\n  render() {\n\n    const {value, onChange, onInput, onPast, onKeyDown, pattern, inputMode, type, ref, numberFormat, ...rest} = this.props;\n    const {valueToShow} = this.state;\n\n    return (\n      <input\n        ref={this.inputRef}\n        type={\"text\"}\n        inputMode={\"numeric\"}\n        pattern={\"[0-9]*\"}\n        value={valueToShow}\n        onKeyDown={this.handleKeyDown}\n        onPaste={this.handlePaste}\n        onChange={this.handleChange}\n        onInput={this.handleInput}\n        {...rest}\n      />\n      );\n  }\n}\nexport default NumberInput;\n\n\nexport function mapToFarsi(str) {\n  if(!str) return str;\n  return str.toString().replace(/[1234567890]/gi, e => String.fromCharCode(e.charCodeAt(0) + 1728))\n}\n\nexport function mapToLatin(str) {\n  if(!str) return str;\n  return str.toString().replace(/[۱۲۳۴۵۶۷۸۹۰]/gi, e => String.fromCharCode(e.charCodeAt(0) - 1728))\n}\n\nexport function stripAnyThingButDigits(str) {\n  if(!str) return str;\n  return str.toString().replace(/[^1234567890۱۲۳۴۵۶۷۸۹۰]/gi, '');\n}\n","import React, { Component } from 'react';\nimport { NumberInput } from \"./lib\";\nimport {NUMBER_FORMAT_LATIN} from './lib/NumberInput';\n\nclass Example extends Component {\n  state = {\n    value: '',\n    Number1: undefined,\n    Number2: '123',\n  };\n\n  handleChange = (event) => {\n    const newState = {};\n    const t = event.target;\n\n    newState[t.name] = t.value;\n    this.setState(newState, ()=>{\n      console.log('after', this.state)\n    });\n  };\n\n  render(){\n    return (\n      <React.Fragment>\n        <div>\n          <br/>\n          <br/>\n          <br/>\n          <label>خروجی عدد لاتین\n            <br/>\n            <input type=\"text\" style={{width: 250}} value={this.state.Number1} placeholder=\"از اینجا کلید تب را چند بار بزنید\" />\n          </label>\n          <br/>\n          <br/>\n          <label>\n            نمونه فارسی\n            <br/>\n            <NumberInput name=\"Number1\" value={this.state.Number1} onChange={this.handleChange} placeholder=\"type/paste a number\" />\n          </label>\n        </div>\n        <br/>\n        <div>\n          <label>\n            نمونه لاتین\n            <br/>\n            <NumberInput name=\"Number2\" value={this.state.Number2} numberFormat={NUMBER_FORMAT_LATIN} onChange={this.handleChange} placeholder=\"type/paste a number\" />\n          </label>\n        </div>\n        <br/>\n        <br/>\n        <label>خروجی\n          <br/>\n          <input type=\"text\" style={{width: 250}} value={this.state.Number2} placeholder=\"این فیلد خروجی است\" />\n        </label>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Example;\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport Example from './Example';\n\nconst App = () => (\n  <div style={{ width: 640, margin: \"15px auto\" }}>\n    <h1>Hello React</h1>\n\n    <Example/>\n\n  </div>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}