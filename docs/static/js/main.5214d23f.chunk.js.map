{"version":3,"sources":["lib/util.js","lib/NumberInput.js","lib/DecimalInput.js","lib/CardNumberInput.js","Example.js","index.js"],"names":["NUMBER_FORMAT_FARSI","NUMBER_FORMAT_LATIN","mapToFarsi","str","toString","replace","e","c","charCodeAt","String","fromCharCode","mapToLatin","stripAnyThingButDigits","repeatStr","n","r","i","NumberInput","props","readValuesFromProps","value","valueToShow","mapValue","numberFormat","selectionStart","undefined","selectionEnd","handleKeyDown","event","disabled","readOnly","preventDefault","keyCode","updateState","deleteValue","target","updateValue","key","hideKeyboard","ctrlKey","metaKey","inputRef","current","blur","handlePaste","enteredValue","clipboardData","window","getData","handleInput","values","recheckValue","newState","forceFireChange","noFireOnChange","fireOnChangeInTheEnd","document","activeElement","setSelectionRange","fireOnChange","element","enteredValueMapped","maxLength","length","substring","qty","onChange","name","ref","getInputRef","React","createRef","nextProps","nextState","this","shallowEqualObjects","style","className","placeholder","rest","onInput","onPast","onKeyDown","pattern","inputMode","type","defaultValue","dir","onPaste","Component","DecimalInput","defaultThousandSeparator","defaultDecimalSeparator","asString","updateElementValue","decimalSeparator","maxDecimal","negate","stripAnyThingButNumber","firstHyphenIndex","indexOf","mapDecimalSeparator","decimalSeparatorRegex","valueIsValid","currentValue","valueBeforeCursor","valueAfterCursor","countThousandSeparator","stripThousandSeparator","latinNumber","firstNonZeroDigit","charAt","maxDigits","separated","addThousandSeparator","valueToShowWithSeparator","checkValue","Number","thousandSeparator","alreadFoundDecimalSeparator","alreadyPassedDecimalSeparator","groupCount","match","thousandSeparatorRegex","numberRegex","RegExp","CARD_SEPERATOR","SEPERATORES_REGEX","MATCH_REGEX","EMPTY_VALUE","CardNumberInput","readCardNumberFromValue","latinNumberValue","valueWithNoSeperator","match4Digit","readValues","isValueValidCardNumber","handleFocus","isValueEmpty","jumpTo","onFocus","handleBlur","onBlur","jumpToNext","whereTheCaretIs","whereIsCaret","jumpToPrevious","section","caretPosition","shiftKey","Math","abs","onShowDialog","valueFromClipboard","inputValue","seperatorBefore","lastIndexOf","seperatorAfter","floor","resetValues","newValues","nextSeperator","previousValue","emptyValue","bind","Example","state","Number1","Number2","Number3","color","bgColor","Tel1","value1","handleChange","t","setState","console","log","handleValueChange","substr","toggleColor","toggleBgColor","toggleDisabled","toggleReadOnly","togglePlaceholder","spanRef","clearInterval","interval","backgroundColor","Fragment","autoComplete","onKeyPress","innerHTML","charCode","width","onClick","App","margin","padding","render","getElementById"],"mappings":"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","file":"static/js/main.5214d23f.chunk.js","sourcesContent":["export const NUMBER_FORMAT_FARSI = 'FARSI';\nexport const NUMBER_FORMAT_LATIN = 'LATIN';\n\nexport function mapToFarsi(str) {\n  if(!str) return str;\n  return str.toString().replace(/[1234567890١٢٣٤٥٦٧٨٩٠]/gi, e => { const c = e.charCodeAt(0); return String.fromCharCode(c + (c < 60 ? 1728 : 144)) })\n}\n\nexport function mapToLatin(str) {\n  if(!str) return str;\n  return str.toString().replace(/[۱۲۳۴۵۶۷۸۹۰١٢٣٤٥٦٧٨٩٠]/gi, e => { const c = e.charCodeAt(0); return String.fromCharCode(c - (c < 1770 ? 1584 : 1728)) })\n}\n\nexport function stripAnyThingButDigits(str) {\n  if(!str) return str;\n  return str.toString().replace(/[^1234567890۱۲۳۴۵۶۷۸۹۰١٢٣٤٥٦٧٨٩٠]/gi, '');\n}\n\nexport function hasStringACharToGoToNext (str) {\n  if(str.indexOf('.')>=0) return true;\n  if(str.indexOf(',')>=0) return true;\n  // if(str.indexOf('/')>=0) return true;\n  if(str.indexOf('-')>=0) return true;\n  if(str.indexOf(';')>=0) return true;\n  if(str.indexOf('*')>=0) return true;\n  if(str.indexOf('#')>=0) return true;\n  if(str.indexOf(' ')>=0) return true;\n  if(str.indexOf('،')>=0) return true;\n  return false;\n}\n\n/**\n * @param {string} str\n * @param {number} n\n */\nexport function repeatStr(str, n){\n  let r = '';\n  for(let i=0; i<n; i++){\n    r += str;\n  }\n  return r;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shallowEqualObjects from 'shallow-equal/objects';\n\nimport { mapToFarsi, mapToLatin, stripAnyThingButDigits, NUMBER_FORMAT_FARSI, NUMBER_FORMAT_LATIN} from './util';\n\nclass NumberInput extends Component {\n\n  static propTypes = {\n    /**\n     * The ref to pass on the input, if empty it will be created internally\n     */\n    inputRef: PropTypes.any,\n    getInputRef: PropTypes.any,\n    /**\n     * The name that will be set while firing the onChange event in the target object\n     */\n    name: PropTypes.string,\n    /**\n     * Callback function that is fired when the cart number value changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Disables the number input.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * makes the number input readonly.\n     */\n    readOnly: PropTypes.bool,\n    /**\n     * accepted number digit count.\n     */\n    maxLength: PropTypes.number,\n    /**\n     * Callback function that is fired when a click event occurs on the input.\n     */\n    onClick: PropTypes.func,\n    /**\n     * Callback function that is fired when the input gains focus.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Sets the value for the number input.\n     */\n    value: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n    let ref = props.inputRef || props.getInputRef;\n    if(ref && typeof ref === 'function'){\n      ref = ref();\n    }\n    this.inputRef = ref ? ref : React.createRef();\n    // this.rr = React.createRef();\n\n    this.values = this.readValuesFromProps(props);\n  }\n\n  readValuesFromProps = (props) => {\n    const value = props.value || '';\n    const valueToShow = this.mapValue(value, props.numberFormat);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart: undefined,\n      selectionEnd: undefined,\n    };\n  };\n\n  handleKeyDown = (event) => {\n    // console.log('keyCode: ', event.keyCode, 'key: ', event.key);\n    if(this.props.disabled || this.props.readOnly) {\n      event.preventDefault();\n    }else if(event.keyCode===8) { //backspace\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, -1));\n    }else if(event.keyCode===46){ //delete\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, 1));\n    }else if(event.keyCode>=48 && event.keyCode<=57){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, (event.keyCode - 48).toString(), this.props.numberFormat));\n    }else if(event.keyCode>=96 && event.keyCode<=105){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, (event.keyCode - 96).toString(), this.props.numberFormat));\n    }else if((event.key>='۰' && event.key<='۹') || (event.key>='٠' && event.key<='٩')){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, event.key, this.props.numberFormat));\n    }else if(event.keyCode>=35 && event.keyCode<=40){ //arrows\n    }else if(event.keyCode===9){ //tab\n    }else if(event.keyCode===13){ //return\n      this.hideKeyboard();\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===67 || event.keyCode===86 || event.keyCode===88)){ //copy/paste/cut\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===82)){ //refresh key\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===82)){ //refresh key\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===73)){ //inspector\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===65)){ //select all\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===76)){ //location focus\n    }else if(event.keyCode>=112 && event.keyCode<=123){ // All other F keys\n    }else if(event.keyCode===229){ //android bug workaround\n    }else{\n      // console.log('other');\n      // console.log('keyCode: ', event.keyCode, 'key: ', event.key, 'ctrlKey: ', event.ctrlKey);\n      // this.rr.current.innerText = `keyCode: ${event.keyCode} key:  ${event.key} ctrlKey: ${event.ctrlKey}`;\n      event.preventDefault();\n    }\n  };\n\n  hideKeyboard = () => {\n    this.inputRef.current.blur();\n  }\n\n  handlePaste = (event) => {\n    event.preventDefault();\n    if(this.props.disabled || this.props.readOnly) return;\n\n    const enteredValue = stripAnyThingButDigits((event.clipboardData || window.clipboardData).getData('text'));\n\n    this.updateState(this.updateValue(event.target, enteredValue, this.props.numberFormat));\n  };\n\n  handleInput = (event) => {\n    if(this.props.disabled || this.props.readOnly) return;\n    if(this.values.valueToShow===event.target.value) return;\n\n    const enteredValue = stripAnyThingButDigits(event.target.value);\n\n    this.updateState(this.recheckValue(event.target, enteredValue, this.props.numberFormat), true);\n  };\n\n  mapValue = (value, numberFormat) => {\n    if(numberFormat===NUMBER_FORMAT_FARSI){\n      return mapToFarsi(value);\n    }else if(numberFormat===NUMBER_FORMAT_LATIN){\n      return mapToLatin(value);\n    }\n    return mapToFarsi(value);\n  };\n\n\n  updateState = (newState, forceFireChange, noFireOnChange) => {\n    if(!newState) return;\n\n    this.values = newState;\n    let fireOnChangeInTheEnd = false;\n    if(this.inputRef.current.value !== this.values.valueToShow){\n      fireOnChangeInTheEnd = true;\n      this.inputRef.current.value = this.values.valueToShow;\n    }\n    if(this.inputRef.current===document.activeElement){\n      // console.log('has focus :D');\n      this.inputRef.current.setSelectionRange(this.values.selectionStart, this.values.selectionEnd);\n    }else{\n      // console.log('has not focus :(');\n    }\n    if(fireOnChangeInTheEnd || forceFireChange){\n      if(!noFireOnChange){\n        this.fireOnChange();\n      }\n    }\n  };\n\n  updateValue = (element, enteredValue, numberFormat) => {\n    const enteredValueMapped = this.mapValue(enteredValue, numberFormat);\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    if(this.props.maxLength && valueToShow.length + enteredValue.length > this.props.maxLength){\n      return;\n    }\n\n    valueToShow = valueToShow.substring(0, selectionStart) + enteredValueMapped + valueToShow.substring(selectionEnd);\n\n    selectionStart += enteredValueMapped.length;\n    selectionEnd = selectionStart;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  recheckValue = (element, enteredValue, numberFormat) => {\n    let valueToShow = this.mapValue(enteredValue, numberFormat);\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  deleteValue = (element, qty) => {\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    // console.log({selectionStart, selectionEnd})\n\n    if(selectionStart===selectionEnd){\n      if(qty < 0) {\n        if(selectionStart===0) return;\n        valueToShow = valueToShow.substring(0, selectionStart + qty) + valueToShow.substring(selectionEnd);\n        selectionStart += qty;\n      }else{\n        if(selectionEnd===valueToShow.length) return;\n        valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd+qty);\n      }\n    }else{\n      valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd);\n    }\n\n    selectionEnd = selectionStart;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  fireOnChange = () => {\n    if(this.props.onChange){\n      this.props.onChange({target: {name: this.props.name, value: this.values.value}});\n    }\n  };\n\n  shouldComponentUpdate(nextProps, nextState){\n    if(nextProps.value !== this.values.value || nextProps.numberFormat !== this.props.numberFormat){\n      this.updateState(this.readValuesFromProps(nextProps), false, true);\n    }\n    if(!shallowEqualObjects(nextProps.style, this.props.style)){\n      return true;\n    }\n    if(nextProps.className !== this.props.className){\n      this.inputRef.current.className = nextProps.className;\n    }\n    if(nextProps.disabled !== this.props.disabled){\n      this.inputRef.current.disabled = nextProps.disabled;\n    }\n    if(nextProps.readOnly !== this.props.readOnly){\n      this.inputRef.current.readOnly = nextProps.readOnly;\n    }\n    if(nextProps.placeholder !== this.props.placeholder){\n      this.inputRef.current.placeholder = nextProps.placeholder;\n    }\n    return false;\n  }\n\n  render() {\n    const {value, onChange, onInput, onPast, onKeyDown, pattern, inputMode, type, ref, inputRef, getInputRef, numberFormat, defaultValue, ...rest} = this.props;\n    const {valueToShow} = this.values;\n\n    // const localInputMode = this.props.type === 'tel' ? 'tel' : 'numeric'; // as we use type=tel, then we do not need it any more\n    // const localPattern = '[0-9]*'; // it has problem with the form checking, as we insert persian digit, it is not acceptable for the browser\n\n    return (\n      <input\n        ref={this.inputRef}\n        type={\"tel\"} // I tried to use text and using inputMode, but it does not work on Safari\n        // inputMode={localInputMode}\n        // xInputMode={localnputMode} // in firefox OS it is x-inputmode, I do not know how to handle it\n        dir={\"ltr\"}\n        // pattern={localPattern}\n        defaultValue={valueToShow}\n        onKeyDown={this.handleKeyDown}\n        onPaste={this.handlePaste}\n        onInput={this.handleInput}\n        {...rest}\n      />\n      );\n    //<p ref={this.rr} type={\"text\"}>empty</p></div>\n\n  }\n}\nexport default NumberInput;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shallowEqualObjects from 'shallow-equal/objects';\n\nimport { mapToFarsi, mapToLatin, NUMBER_FORMAT_FARSI, NUMBER_FORMAT_LATIN} from './util';\n\nclass DecimalInput extends Component {\n\n  static propTypes = {\n    /**\n     * The ref to pass on the input, if empty it will be created internally\n     */\n    inputRef: PropTypes.any,\n    getInputRef: PropTypes.any,\n    /**\n     * The name that will be set while firing the onChange event in the target object\n     */\n    name: PropTypes.string,\n    /**\n     * Callback function that is fired when the cart number value changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Disables the decimal input.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * makes the decimal input readonly.\n     */\n    readOnly: PropTypes.bool,\n    /**\n     * Callback function that is fired when a click event occurs on the input.\n     */\n    onClick: PropTypes.func,\n    /**\n     * Callback function that is fired when the input gains focus.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Sets the value for the decimal input.\n     */\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    /**\n     * Sets the thousand separator\n     */\n    thousandSeparator: PropTypes.string,\n    /**\n     * Sets the decimal separator\n     */\n    decimalSeparator: PropTypes.string,\n    /**\n     * makes the value string, it is useful for big decimals.\n     */\n    asString: PropTypes.bool,\n    /**\n     * max digits before decimal separator.\n     */\n    maxDigits: PropTypes.number,\n    /**\n     * max digits after decimal separator.\n     */\n    maxDecimal: PropTypes.number,\n  };\n\n  constructor(props) {\n    super(props);\n    let ref = props.inputRef || props.getInputRef;\n    if(ref && typeof ref === 'function'){\n      ref = ref();\n    }\n    this.inputRef = ref ? ref : React.createRef();\n    // this.rr = React.createRef();\n\n    this.thousandSeparator = props.thousandSeparator === '' ? '' : props.thousandSeparator || this.defaultThousandSeparator();\n    this.decimalSeparator = props.decimalSeparator || this.defaultDecimalSeparator();\n    this.thousandSeparatorRegex = new RegExp(`[${this.thousandSeparator}]`, 'g');\n    this.decimalSeparatorRegex = new RegExp(`[.${this.decimalSeparator}]`, 'g');\n    this.numberRegex = new RegExp(`[^-1234567890۱۲۳۴۵۶۷۸۹۰.${this.decimalSeparator}]`, 'gi');\n    this.values = this.readValuesFromProps(props);\n  }\n\n  defaultThousandSeparator = () => {\n    return ',';\n  };\n\n  defaultDecimalSeparator = () => {\n    return '.';\n  };\n\n  readValuesFromProps = (props) => {\n    if(props.value || props.value===0){\n      const value = props.value.toString();\n      return this.updateValue('', 0, 0, value, props.numberFormat, props.asString);\n    }\n\n    return {\n      value: undefined,\n      valueToShow: '',\n      selectionStart: undefined,\n      selectionEnd: undefined,\n    };\n  };\n\n  handleKeyDown = (event) => {\n    // console.log('keyCode: ', event.keyCode, 'key: ', event.key);\n    if(this.props.disabled || this.props.readOnly) {\n      event.preventDefault();\n    }else if(event.keyCode===8) { //backspace\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, -1, this.props.asString));\n    }else if(event.keyCode===46){ //delete\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, 1, this.props.asString));\n    }else if(event.keyCode>=48 && event.keyCode<=57){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateElementValue(event.target, (event.keyCode - 48).toString(), this.props.numberFormat, this.props.asString));\n    }else if(event.keyCode>=96 && event.keyCode<=105){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateElementValue(event.target, (event.keyCode - 96).toString(), this.props.numberFormat, this.props.asString));\n    }else if((event.key>='۰' && event.key<='۹') || (event.key>='٠' && event.key<='٩')){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateElementValue(event.target, event.key, this.props.numberFormat, this.props.asString));\n    }else if(event.key===this.decimalSeparator || event.keyCode===190){ //point\n      event.preventDefault();\n      if(this.props.maxDecimal===null || this.props.maxDecimal===undefined || this.props.maxDecimal > 0){\n        this.updateState(this.updateElementValue(event.target, this.decimalSeparator, this.props.numberFormat, this.props.asString));\n      }\n    }else if(event.key==='-' || event.keyCode===189){ // -\n      event.preventDefault();\n      this.updateState(this.negate());\n    }else if(event.keyCode>=35 && event.keyCode<=40){ //arrows\n    }else if(event.keyCode===9){ //tab\n    }else if(event.keyCode===13){ //return\n      this.hideKeyboard();\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===67 || event.keyCode===86 || event.keyCode===88)){ //copy/paste/cut\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===82)){ //refresh key\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===82)){ //refresh key\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===73)){ //inspector\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===65)){ //select all\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===76)){ //location focus\n    }else if(event.keyCode>=112 && event.keyCode<=123){ // All other F keys\n    }else if(event.keyCode===229){ //android bug workaround\n    }else{\n      // console.log('other');\n      // console.log('keyCode: ', event.keyCode, 'key: ', event.key, 'ctrlKey: ', event.ctrlKey);\n      // this.rr.current.innerText = `keyCode: ${event.keyCode} key:  ${event.key} ctrlKey: ${event.ctrlKey}`;\n      event.preventDefault();\n    }\n  };\n\n  hideKeyboard = () => {\n    this.inputRef.current.blur();\n  }\n\n  handlePaste = (event) => {\n    event.preventDefault();\n    if(this.props.disabled || this.props.readOnly) return;\n\n    let enteredValue = this.stripAnyThingButNumber((event.clipboardData || window.clipboardData).getData('text'));\n    if(this.values.valueToShow!==''){\n      enteredValue = enteredValue.replace(/[-]/g, '');\n    }\n\n    this.updateState(this.updateElementValue(event.target, enteredValue, this.props.numberFormat, this.props.asString));\n  };\n\n  handleInput = (event) => {\n    if(this.values.valueToShow===event.target.value) return;\n    if(this.props.disabled || this.props.readOnly) return;\n\n    const enteredValue = this.stripAnyThingButNumber(event.target.value);\n\n    const firstHyphenIndex = enteredValue.indexOf('-');\n    const secondHyphenIndex = enteredValue.indexOf('-', firstHyphenIndex + 1);\n    if(secondHyphenIndex >= 0 || firstHyphenIndex > 0){\n      this.updateState(this.negate());\n    }else{\n      const selectionStart = event.target.selectionStart;\n      const selectionEnd = event.target.selectionEnd;\n      const newState = this.updateValue('', selectionStart, selectionEnd, enteredValue, this.props.numberFormat, this.props.asString);\n      this.updateState(newState, true);\n    }\n  };\n\n  mapValue = (value, numberFormat) => {\n    if(numberFormat===NUMBER_FORMAT_FARSI){\n      return mapToFarsi(value);\n    }else if(numberFormat===NUMBER_FORMAT_LATIN){\n      return mapToLatin(value);\n    }\n    return mapToFarsi(value);\n  };\n\n  mapDecimalSeparator = (value) => {\n    return value.replace(this.decimalSeparatorRegex, this.decimalSeparator);\n  };\n\n\n  updateState = (newState, forceFireChange, noFireOnChange) => {\n    if(!newState) return;\n\n    this.values = newState;\n    let fireOnChangeInTheEnd = false;\n    if(this.inputRef.current.value !== this.values.valueToShow){\n      fireOnChangeInTheEnd = true;\n      this.inputRef.current.value = this.values.valueToShow;\n    }\n    if(this.inputRef.current===document.activeElement){\n      // console.log('has focus :D');\n      this.inputRef.current.setSelectionRange(this.values.selectionStart, this.values.selectionEnd);\n    }else{\n      // console.log('has not focus :(');\n    }\n    if(fireOnChangeInTheEnd || forceFireChange){\n      if(!noFireOnChange){\n        this.fireOnChange();\n      }\n    }\n  };\n\n  negate = () => {\n    let {value,\n    valueToShow,\n    valueIsValid,\n    selectionStart,\n    selectionEnd} = this.values;\n\n    if(value > 0) {\n      value = -value;\n      valueToShow = '-'+valueToShow;\n      selectionStart++;\n      selectionEnd++;\n    }else if(value < 0) {\n      value = -value;\n      valueToShow = valueToShow.substring(1);\n      selectionStart--;\n      selectionEnd--;\n    }else{\n      return;\n    }\n\n    return {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  updateElementValue = (element, enteredValue, numberFormat, asString) => {\n    let currentValue = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n    return this.updateValue(currentValue, selectionStart, selectionEnd, enteredValue, numberFormat, asString);\n  }\n\n  updateValue = (currentValue, selectionStart, selectionEnd, enteredValue, numberFormat, asString) => {\n    const enteredValueMapped = this.mapDecimalSeparator(this.mapValue(enteredValue, numberFormat));\n    let valueToShow = currentValue;\n    if(enteredValueMapped===this.decimalSeparator){\n      const i = valueToShow.indexOf(this.decimalSeparator);\n      if(i>-1){\n        return;\n      }\n    }\n\n    let valueBeforeCursor = valueToShow.substring(0, selectionStart);\n    let valueAfterCursor = valueToShow.substring(selectionEnd);\n\n    selectionStart -= this.countThousandSeparator(valueBeforeCursor);\n    valueBeforeCursor = this.stripThousandSeparator(valueBeforeCursor);\n    valueAfterCursor = this.stripThousandSeparator(valueAfterCursor);\n\n    valueToShow = valueBeforeCursor + enteredValueMapped + valueAfterCursor;\n    selectionStart += enteredValueMapped.length;\n\n    if(typeof this.props.maxDecimal === 'number'){\n      const i = valueToShow.indexOf(this.decimalSeparator);\n      if(i>-1){\n        const decimalLength = valueToShow.length - i - 1;\n        if(decimalLength > this.props.maxDecimal){\n          valueToShow = valueToShow.substring(0, i + (this.props.maxDecimal? 1 : 0) + this.props.maxDecimal);\n          if(selectionStart>valueToShow.length) selectionStart = valueToShow.length;\n        }\n      }\n    }\n    {\n      const latinNumber = mapToLatin(valueToShow);\n      const i = this.firstNonZeroDigit(latinNumber, 0);\n      if(i > 0 && valueToShow.length>1){\n        valueToShow = valueToShow.substring(i);\n        selectionStart -= i;\n      }else if(i===0 && latinNumber.charAt(0)==='.'){\n        valueToShow = this.mapValue('0', numberFormat) + valueToShow;\n        selectionStart++;\n      }\n    }\n    if(typeof this.props.maxDigits === 'number'){\n      const i = valueToShow.indexOf(this.decimalSeparator);\n      const digitsLength = i>-1 ? i : valueToShow.length;\n      if(digitsLength > this.props.maxDigits){\n        if(i===-1){\n          valueToShow = valueToShow.substring(0, this.props.maxDigits);\n          if(selectionStart>valueToShow.length) selectionStart = valueToShow.length;\n        }else{\n          valueToShow = valueToShow.substring(0, this.props.maxDigits) + (i===-1 ? '' : valueToShow.substring(i));\n          if(selectionStart>this.props.maxDigits) selectionStart = this.props.maxDigits;\n        }\n      }\n    }\n\n    const separated = this.addThousandSeparator(valueToShow, selectionStart);\n    valueToShow = separated.valueToShowWithSeparator;\n    selectionStart = separated.selectionStart;\n    selectionEnd = selectionStart;\n\n    let value = this.stripThousandSeparator(mapToLatin(valueToShow));\n    let valueIsValid;\n    if(asString) {\n      const checkValue = Number(value);\n      valueIsValid = (typeof checkValue === 'number' || checkValue === undefined || checkValue === null);\n    }else{\n      value = Number(value);\n      valueIsValid = (typeof value === 'number' || value === undefined || value === null);\n    }\n\n    return {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  deleteValue = (element, qty, asString) => {\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    // console.log({selectionStart, selectionEnd})\n\n    if(selectionStart===selectionEnd){\n      if(qty < 0) {\n        if(selectionStart===0) return;\n        let valueBeforeCursor = valueToShow.substring(0, selectionStart + qty);\n        let valueAfterCursor = valueToShow.substring(selectionEnd);\n    \n        selectionStart -= this.countThousandSeparator(valueBeforeCursor);\n        valueBeforeCursor = this.stripThousandSeparator(valueBeforeCursor);\n        valueAfterCursor = this.stripThousandSeparator(valueAfterCursor);\n    \n        valueToShow = valueBeforeCursor + valueAfterCursor;\n        selectionStart += qty;\n      }else{\n        if(selectionEnd===valueToShow.length) return;\n        let valueBeforeCursor = valueToShow.substring(0, selectionStart);\n        let valueAfterCursor = valueToShow.substring(selectionEnd+qty);\n    \n        selectionStart -= this.countThousandSeparator(valueBeforeCursor);\n        valueBeforeCursor = this.stripThousandSeparator(valueBeforeCursor);\n        valueAfterCursor = this.stripThousandSeparator(valueAfterCursor);\n    \n        valueToShow = valueBeforeCursor + valueAfterCursor;\n      }\n    }else{\n      let valueBeforeCursor = valueToShow.substring(0, selectionStart);\n      let valueAfterCursor = valueToShow.substring(selectionEnd);\n  \n      selectionStart -= this.countThousandSeparator(valueBeforeCursor);\n      valueBeforeCursor = this.stripThousandSeparator(valueBeforeCursor);\n      valueAfterCursor = this.stripThousandSeparator(valueAfterCursor);\n  \n      valueToShow = valueBeforeCursor + valueAfterCursor;\n    }\n\n    const separated = this.addThousandSeparator(valueToShow, selectionStart);\n    valueToShow = separated.valueToShowWithSeparator;\n    selectionStart = separated.selectionStart;\n    selectionEnd = selectionStart;\n\n    let value = this.stripThousandSeparator(mapToLatin(valueToShow));\n    let valueIsValid;\n    if(asString) {\n      const checkValue = Number(value);\n      valueIsValid = (typeof checkValue === 'number' || checkValue === undefined || checkValue === null);\n    }else{\n      value = Number(value);\n      valueIsValid = (typeof value === 'number' || value === undefined || value === null);\n    }\n\n\n    return {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n\n  addThousandSeparator = (valueToShow, selectionStart) => {\n    if(this.thousandSeparator==='')\n      return {valueToShowWithSeparator: valueToShow, selectionStart};\n    let valueToShowWithSeparator = '';\n    let alreadFoundDecimalSeparator = false;\n    let alreadyPassedDecimalSeparator = valueToShow.indexOf(this.decimalSeparator) === -1;\n    let groupCount = 0;\n    for (let i = valueToShow.length-1; i>=0; i--){\n      const c = valueToShow.charAt(i);\n      if(c===this.decimalSeparator){\n        if(!alreadFoundDecimalSeparator){\n          alreadFoundDecimalSeparator = true;\n          valueToShowWithSeparator = c + valueToShowWithSeparator;\n          alreadyPassedDecimalSeparator = true;\n          groupCount = 0;\n        }else{\n          if(i <= selectionStart){\n            selectionStart--;\n          }\n        }\n      }else{\n        if(alreadyPassedDecimalSeparator && groupCount===3 && c!=='-'){\n          valueToShowWithSeparator = this.thousandSeparator + valueToShowWithSeparator;\n          groupCount = 0;\n          if(i<selectionStart-1){\n            selectionStart++;\n          }\n        }\n        valueToShowWithSeparator = c + valueToShowWithSeparator;\n        groupCount++;\n      }\n    }\n    return {valueToShowWithSeparator, selectionStart};\n  };\n\n  firstNonZeroDigit = (value, i) => {\n    if(value.charAt(i)===this.decimalSeparator) {\n      if(i>0)\n        return i - 1;\n      else return i;\n    }\n    if(value.charAt(i)==='0') return this.firstNonZeroDigit(value, i+1);\n    return i;\n  };\n\n  countThousandSeparator = (value) => {\n    return this.thousandSeparator === '' ? 0 : (value.match(this.thousandSeparatorRegex) || []).length;\n  };\n\n  stripThousandSeparator = (value) => {\n    return this.thousandSeparator === '' ? value : value.replace(this.thousandSeparatorRegex, '');\n  };\n\n  stripAnyThingButNumber = (str) => {\n    if(!str) return str;\n    return str.toString().replace(this.numberRegex, '');\n  };\n  \n  fireOnChange = () => {\n    if(this.props.onChange){\n      this.props.onChange({target: {name: this.props.name, value: this.values.value}});\n    }\n  };\n\n  shouldComponentUpdate(nextProps, nextState){\n    if(nextProps.value !== this.values.value || nextProps.numberFormat !== this.props.numberFormat){\n      this.updateState(this.readValuesFromProps(nextProps), false, true);\n    }\n    if(!shallowEqualObjects(nextProps.style, this.props.style)){\n      return true;\n    }\n    if(nextProps.className !== this.props.className){\n      this.inputRef.current.className = nextProps.className;\n    }\n    if(nextProps.disabled !== this.props.disabled){\n      this.inputRef.current.disabled = nextProps.disabled;\n    }\n    if(nextProps.readOnly !== this.props.readOnly){\n      this.inputRef.current.readOnly = nextProps.readOnly;\n    }\n    if(nextProps.placeholder !== this.props.placeholder){\n      this.inputRef.current.placeholder = nextProps.placeholder;\n    }\n    return false;\n  }\n\n  render() {\n    const {value, onChange, onInput, onPast, onKeyDown, pattern, inputMode, type, ref, inputRef, getInputRef, numberFormat, defaultValue, asString, maxDecimal, maxDigits, thousandSeparator, decimalSeparator, ...rest} = this.props;\n    const {valueToShow} = this.values;\n\n    // const localInputMode = this.props.type === 'tel' ? 'tel' : 'numeric'; // as we use type=tel, then we do not need it any more\n    // const localPattern = '[0-9]*'; // it has problem with the form checking, as we insert persian digit, it is not acceptable for the browser\n\n    return (\n      <input\n        ref={this.inputRef}\n        type={\"tel\"} // I tried to use text and using inputMode, but it does not work on Safari\n        // inputMode={localInputMode}\n        // xInputMode={localnputMode} // in firefox OS it is x-inputmode, I do not know how to handle it\n        dir={\"ltr\"}\n        // pattern={localPattern}\n        defaultValue={valueToShow}\n        onKeyDown={this.handleKeyDown}\n        onPaste={this.handlePaste}\n        onInput={this.handleInput}\n        {...rest}\n      />\n      );\n    //<p ref={this.rr} type={\"text\"}>empty</p></div>\n\n  }\n}\nexport default DecimalInput;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shallowEqualObjects from 'shallow-equal/objects';\nimport { mapToFarsi, mapToLatin, hasStringACharToGoToNext, repeatStr, NUMBER_FORMAT_FARSI, NUMBER_FORMAT_LATIN} from './util';\n\nconst CARD_SEPERATOR =  '-';\nconst SEPERATORES_REGEX = new RegExp(`[ ${CARD_SEPERATOR}]`, 'g');\nconst MATCH_REGEX = new RegExp(`[0-9]{4}[${CARD_SEPERATOR}][0-9]{4}[${CARD_SEPERATOR}][0-9]{4}[${CARD_SEPERATOR}][0-9]{4}`);\nconst EMPTY_VALUE = `    ${CARD_SEPERATOR}    ${CARD_SEPERATOR}    ${CARD_SEPERATOR}    `;\n\n\nclass CardNumberInput extends Component {\n\n  static propTypes = {\n    /**\n     * The ref to pass on the input, if empty it will be created internally\n     */\n    inputRef: PropTypes.any,\n    getInputRef: PropTypes.any,\n    /**\n     * The name that will be set while firing the onChange event in the target object\n     */\n    name: PropTypes.string,\n    /**\n     * Callback function that is fired when the cart number value changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Override the inline-styles of the root element.\n     */\n    style: PropTypes.object,\n    /**\n     * The css class name of the root element.\n     */\n    className: PropTypes.string,\n    /**\n     * Disables the card number.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * makes the card number readonly.\n     */\n    readOnly: PropTypes.bool,\n    /**\n     * Callback function that is fired when a click event occurs on the input.\n     */\n    onClick: PropTypes.func,\n    /**\n     * Callback function that is fired when the input gains focus.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Sets the value for the card number input.\n     */\n    value: PropTypes.string,\n  };\n\n  constructor(props) {\n    super(props);\n    this.emptyValue = this.emptyValue.bind(this);\n\n    let ref = props.inputRef || props.getInputRef;\n    if(ref && typeof ref === 'function'){\n      ref = ref();\n    }\n    this.inputRef = ref ? ref : React.createRef();\n    // this.rr = React.createRef();\n\n    this.values = this.readValues(props.value);\n    this.previousValue = this.values.value;\n  }\n\n\n  /**\n   * @param {string} value\n   */\n  readCardNumberFromValue = (value) => {\n    if(!value) return;\n\n    const latinNumberValue = mapToLatin(value);\n    const regEx = /[0-9]{4}[^0-9]*[0-9]{4}[^0-9]*[0-9]{4}[^0-9]*[0-9]{4}/;\n    const match = latinNumberValue.match(regEx);\n    if(match){\n      const valueWithNoSeperator = match[0].replace(/[^0-9]*/g, '');\n      return `${valueWithNoSeperator.substring(0, 4)}${CARD_SEPERATOR}${valueWithNoSeperator.substring(4, 8)}${CARD_SEPERATOR}${valueWithNoSeperator.substring(8, 12)}${CARD_SEPERATOR}${valueWithNoSeperator.substring(12, 16)}`;\n    }\n\n    const regEx4Digits = /[0-9]{4}/;\n    const match4Digit = latinNumberValue.match(regEx4Digits);\n    if(match4Digit){\n      this.updateState(this.updateValue(this.inputRef.current, match4Digit[0], this.props.numberFormat));\n      return;\n    }\n\n  }\n    \n  readValues = (value) => {\n    const valueToShow = this.mapValue(value, this.props.numberFormat);\n    const valueIsValid = this.isValueValidCardNumber(value);\n\n    return {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart: undefined,\n      selectionEnd: undefined,\n    };\n  };\n\n  emptyValue() {\n    this.updateState(this.resetValues());\n  };\n\n  handleFocus = (event) => {\n    if(this.isValueEmpty(this.values.value)){\n      this.jumpTo(1);\n    }\n    if(this.props.onFocus){\n      this.props.onFocus(event);\n    }\n  };\n\n  handleBlur = (event) => {\n    if(this.props.onBlur){\n      this.props.onBlur(event);\n    }\n  };\n\n  jumpToNext = () => {\n    const selectionStart = this.inputRef.current.selectionStart;\n    const whereTheCaretIs = this.whereIsCaret(selectionStart);\n\n    if(whereTheCaretIs < 4){\n      this.jumpTo(whereTheCaretIs + 1);\n      return true;\n    }\n    return false;\n  };\n\n  jumpToPrevious = () => {\n    const selectionStart = this.inputRef.current.selectionStart;\n    const whereTheCaretIs = this.whereIsCaret(selectionStart);\n\n    if(whereTheCaretIs > 1){\n      this.jumpTo(whereTheCaretIs - 1);\n      return true;\n    }\n    return false;\n  };\n\n  isValueEmpty = (value) => {\n    if(value.replace(SEPERATORES_REGEX, '')==='') return true;\n    return false;\n  }; \n\n  /**\n   * @param {number} section\n   *  */\n  jumpTo = (section) => {\n    const caretPosition = (section - 1) * 5;\n    this.values.selectionStart = caretPosition;\n    this.values.selectionEnd = caretPosition;\n    this.inputRef.current.setSelectionRange(this.values.selectionStart, this.values.selectionEnd);\n  };\n\n  handleKeyDown = (event) => {\n    // console.log('keyCode: ', event.keyCode, 'key: ', event.key);\n    if(this.props.disabled || this.props.readOnly) {\n      event.preventDefault();\n    }else if(event.keyCode===8) { //backspace\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, -1));\n    }else if(event.keyCode===46){ //delete\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, 1));\n    }else if(event.keyCode>=48 && event.keyCode<=57){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, (event.keyCode - 48).toString(), this.props.numberFormat));\n    }else if(event.keyCode>=96 && event.keyCode<=105){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, (event.keyCode - 96).toString(), this.props.numberFormat));\n    }else if((event.key>='۰' && event.key<='۹') || (event.key>='٠' && event.key<='٩')){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, event.key, this.props.numberFormat));\n    }else if(event.key==='.' || event.key==='/' || event.key==='-' || event.key==='*' || event.key==='#' \n             || \n             event.keyCode===188 || event.keyCode===189 || event.keyCode===190 || event.keyCode===191 \n             ){\n      event.preventDefault();\n      if(event.ctrlKey || event.shiftKey || event.metaKey || event.key==='#'){\n        this.jumpToPrevious();\n      }else{\n        this.jumpToNext();\n      }\n    }else if(event.keyCode>=36 && event.keyCode<=40){ //arrows\n    }else if(event.keyCode===9){ //tab\n      if(Math.abs(this.inputRef.current.selectionStart - this.inputRef.current.selectionEnd)===this.inputRef.current.value.length){\n        return;\n      }\n      if(event.ctrlKey || event.shiftKey || event.metaKey){\n        if(this.jumpToPrevious()) event.preventDefault();\n      }else{\n        if(this.jumpToNext()) event.preventDefault();\n      }\n    }else if(event.keyCode===13){ //return\n      this.hideKeyboard();\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===67 || event.keyCode===86 || event.keyCode===88)){ //copy/paste/cut\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===82)){ //refresh key\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===73)){ //inspector\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===65)){ //select all\n    }else if((event.ctrlKey || event.metaKey) && (event.keyCode===76)){ //location focus\n    }else if(event.keyCode===115){ // F4\n      if(this.props.onShowDialog) {\n        event.preventDefault();\n        this.props.onShowDialog();\n      }\n    }else if(event.keyCode>=112 && event.keyCode<=123){ // All other F keys\n    }else if(event.keyCode===229){ //android bug workaround\n      //K1 : I guess that we have to save the caret position as the input will change it, we need it to know where we have to jump to in handleInput function\n      this.values.selectionStart = this.inputRef.current.selectionStart;\n      this.values.selectionEnd = this.inputRef.current.selectionEnd;\n      //  this.rr.current.innerText = `setting ss to ${this.values.selectionStart}  ${this.values.selectionEnd}`;\n\n    }else{\n      // console.log('other');\n      // console.log('keyCode: ', event.keyCode, 'key: ', event.key, 'ctrlKey: ', event.ctrlKey);\n      //  this.rr.current.innerText = `keyCode: ${event.keyCode} key:  ${event.key} ctrlKey: ${event.ctrlKey}`;\n      event.preventDefault();\n    }\n  };\n\n  hideKeyboard = () => {\n    this.inputRef.current.blur();\n  }\n\n  handlePaste = (event) => {\n    event.preventDefault();\n    if(this.props.disabled || this.props.readOnly) return;\n\n    const valueFromClipboard = this.readCardNumberFromValue((event.clipboardData || window.clipboardData).getData('text'));\n    if(!valueFromClipboard) return;\n\n    const values = this.readValues(valueFromClipboard);\n\n    if(values.valueIsValid){\n      this.updateState(values);\n    }\n  };\n\n  handleInput = (event) => {\n    event.preventDefault();\n    if(this.props.disabled || this.props.readOnly) return;\n    if(this.values.valueToShow===event.target.value) return;\n    const inputValue = event.target.value;\n    // const enteredValue = stripAnyThingButDigits(event.target.value);\n    // this.rr.current.innerText = `V : ${inputValue}`;\n    \n    if(this.inputRef.current.value !== this.values.valueToShow){\n      this.inputRef.current.value = this.values.valueToShow;\n      this.inputRef.current.setSelectionRange(this.values.selectionStart, this.values.selectionEnd);\n    }\n\n    if(hasStringACharToGoToNext(inputValue)){\n      this.jumpToNext();\n    }\n\n    // this.updateState(this.rollbackValue());\n  };\n\n  /**\n   * @param {string} value\n   */\n  mapValue = (value, numberFormat) => {\n    if(numberFormat===NUMBER_FORMAT_FARSI){\n      const mapped = mapToFarsi(value);\n      return mapped;\n    }else if(numberFormat===NUMBER_FORMAT_LATIN){\n      const mapped = mapToLatin(value);\n      return mapped;\n    }\n    const mapped = mapToFarsi(value);\n    return mapped;\n  };\n\n\n  updateState = (newState, noFireOnChange) => {\n    if(!newState) return;\n\n    this.values = newState;\n\n    if(this.values.valueIsValid===undefined){\n      this.values.valueIsValid = this.isValueValidCardNumber(this.values.value);\n    }\n\n    let fireOnChangeInTheEnd = false;\n    //console.log('values on updateState', this.values)\n    if(this.inputRef.current.value !== this.values.valueToShow){\n      fireOnChangeInTheEnd = true;\n      this.inputRef.current.value = this.values.valueToShow;\n    }\n    if(this.inputRef.current===document.activeElement){\n      // console.log('has focus :D');\n      this.inputRef.current.setSelectionRange(this.values.selectionStart, this.values.selectionEnd);\n    }else{\n      // console.log('has not focus :(');\n    }\n    if(fireOnChangeInTheEnd){\n      if(!noFireOnChange){\n        this.fireOnChange();\n      }\n    }\n  };\n\n  updateValue = (element, enteredValue, numberFormat) => {\n    const enteredValueMapped = this.mapValue(enteredValue, numberFormat);\n    let valueToShow = element.value;\n    if(valueToShow===''){\n      valueToShow = EMPTY_VALUE;\n    }\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    valueToShow = valueToShow.substring(0, selectionStart) + enteredValueMapped + valueToShow.substring(selectionEnd);\n    selectionStart += enteredValueMapped.length;\n\n    const seperatorBefore = valueToShow.lastIndexOf(CARD_SEPERATOR, selectionStart - 1) + 1;\n    let seperatorAfter = valueToShow.indexOf(CARD_SEPERATOR, selectionStart);\n    if(seperatorAfter===-1) seperatorAfter = valueToShow.length;\n    if(seperatorAfter - seperatorBefore > 4) {\n      if(selectionStart - seperatorBefore >= 4){\n        valueToShow = valueToShow.substring(0, seperatorBefore) + valueToShow.substring(selectionStart - 4, selectionStart) + valueToShow.substring(seperatorAfter);\n        selectionStart = seperatorBefore + 4;\n      }else{\n        valueToShow = valueToShow.substring(0, seperatorBefore + 4) + valueToShow.substring(seperatorAfter);\n      }\n    }\n\n\n\n    const value = mapToLatin(valueToShow);\n    const valueIsValid = this.isValueValidCardNumber(value);\n\n    if(selectionStart < valueToShow.length && value.substring(selectionStart - 4, selectionStart).match(/[0-9]{4}/)){\n      selectionStart++;\n    }\n    selectionEnd = selectionStart;\n\n    const values = {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart,\n      selectionEnd,\n    };\n\n    return values; \n  };\n\n  /**\n   * @param {number} selectionStart\n   */\n  whereIsCaret = (selectionStart) => {\n    return Math.floor(selectionStart / 5) + 1;\n  };\n\n  /**\n   * @param {string} value\n   */\n  isValueValidCardNumber = (value) => {\n    if(!value) return false;\n    if(value.match(MATCH_REGEX)) return true;\n    return false;\n  };\n\n  resetValues = () => {\n    const value = '';\n    return {\n      value,\n      valueToShow: this.mapValue(value, this.props.numberFormat),\n      valueIsValid: false,\n      selectionStart: 0,\n      selectionEnd: 0,\n    };\n  };\n\n  deleteValue = (element, qty) => {\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    if(selectionStart===selectionEnd){\n      if(qty < 0) {\n        if(selectionStart===0) return;\n        if(valueToShow.substring(selectionStart + qty, selectionStart)===CARD_SEPERATOR) {\n          const newValues = {...this.values};\n          newValues.selectionStart--;\n          newValues.selectionEnd--;\n          return newValues;\n        }\n        valueToShow = valueToShow.substring(0, selectionStart + qty) + valueToShow.substring(selectionEnd);\n        selectionStart += qty;\n      }else{\n        if(selectionEnd===valueToShow.length) return;\n        if(valueToShow.substring(selectionStart, selectionStart + qty)===CARD_SEPERATOR) return;\n        valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd+qty);\n      }\n      const nextSeperator = valueToShow.indexOf(CARD_SEPERATOR, selectionStart);\n      if(nextSeperator===-1){\n        valueToShow = valueToShow + ' ';\n      }else{\n        valueToShow = valueToShow.substring(0, nextSeperator) +repeatStr(' ', Math.abs(qty))+ valueToShow.substring(nextSeperator);\n      }\n    }else{\n      if(valueToShow.substring(selectionStart, selectionEnd).indexOf(CARD_SEPERATOR)>=0){\n        valueToShow = '';\n        selectionStart = 0;\n      }else {\n        valueToShow = valueToShow.substring(0, selectionStart) +repeatStr(' ', selectionEnd-selectionStart)+ valueToShow.substring(selectionEnd);\n      }\n    }\n\n    selectionEnd = selectionStart;\n\n    const value = mapToLatin(valueToShow);\n    const valueIsValid = this.isValueValidCardNumber(value);\n\n    const values = {\n      value,\n      valueToShow,\n      valueIsValid,\n      selectionStart,\n      selectionEnd,\n    };\n\n    return values; \n  };\n\n  fireOnChange = () => {\n    if(this.props.onChange){\n      const value = this.values.value;\n      if(this.previousValue !== value){\n        this.previousValue = value;\n        const target = {\n          name: this.props.name,\n          value: this.values.value,\n          valueIsValid: this.values.valueIsValid,\n        };\n        this.props.onChange({target});\n      }\n    }\n  };\n\n  shouldComponentUpdate(nextProps, nextState){\n    if(nextProps.value !== this.values.value || nextProps.numberFormat !== this.props.numberFormat){\n      this.updateState(this.readValues(nextProps.value), true);\n    }\n    if(!shallowEqualObjects(nextProps.style, this.props.style)){\n      return true;\n    }\n    if(nextProps.className !== this.props.className){\n      this.inputRef.current.className = nextProps.className;\n    }\n    if(nextProps.disabled !== this.props.disabled){\n      this.inputRef.current.disabled = nextProps.disabled;\n    }\n    if(nextProps.readOnly !== this.props.readOnly){\n      this.inputRef.current.readOnly = nextProps.readOnly;\n    }\n    if(nextProps.placeholder !== this.props.placeholder){\n      this.inputRef.current.placeholder = nextProps.placeholder;\n    }\n    return false;\n  }\n\n  render() {\n    const {value, onChange, onFocus, onBlur, onInput, onPast, onKeyDown, onShowDialog, pattern, inputMode, type, inputRef, getInputRef, numberFormat, defaultValue, ...rest} = this.props;\n    const {valueToShow} = this.values;\n\n    // const localInputMode = this.props.type === 'tel' ? 'tel' : 'numeric'; // as we use type=tel, then we do not need it any more\n    // const localPattern = '[0-9]*'; // it has problem with the form checking, as we insert persian digit, it is not acceptable for the browser\n\n    return (\n      <input\n        ref={this.inputRef}\n        type={\"tel\"} // I tried to use text and using inputMode, but it does not work on Safari\n        // inputMode={localInputMode}\n        // xInputMode={localnputMode} // in firefox OS it is x-inputmode, I do not know how to handle it\n        dir={\"ltr\"}\n        // pattern={localPattern}\n        defaultValue={valueToShow}\n        onKeyDown={this.handleKeyDown}\n        onPaste={this.handlePaste}\n        onInput={this.handleInput}\n        onFocus={this.handleFocus}\n        onBlur={this.handleBlur}\n        {...rest}\n      />\n      );\n    //<p ref={this.rr} type={\"text\"}>empty</p></div>\n\n  }\n}\n\n\nexport default CardNumberInput;","import React, { Component } from 'react';\nimport { NumberInput, DecimalInput, CardNumberInput, NUMBER_FORMAT_FARSI } from \"./lib\";\nimport {NUMBER_FORMAT_LATIN} from './lib';\nimport './Example.css';\n\nclass Example extends Component {\n  state = {\n    Number1: '123',\n    Number2: '',\n    Number3: 1200.246,\n    color: false,\n    bgColor: false,\n    disabled: false,\n    readOnly: false,\n    Tel1: '0912',\n    value1: '',\n    placeholder: 'type/paste a number',\n  };\n\n  constructor(){\n    super();\n    this.spanRef = React.createRef();\n  }\n\n  componentDidMount(){\n    // this.interval = setInterval(this.toggleBgColor, 6000);\n    // this.interval = setInterval(this.toggleColor, 3000);\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.interval);\n  }\n\n  handleChange = (event) => {\n    const newState = {};\n    const t = event.target;\n\n    newState[t.name] = t.value;\n    this.setState(newState, ()=>{\n      console.log('state', this.state)\n    });\n  };\n\n  handleValueChange = (event) => {\n    const newState = {};\n    const t = event.target;\n\n    newState[t.name.substr(0, 7)] = t.value;\n    this.setState(newState, ()=>{\n      console.log('state', this.state)\n    });\n  };\n\n  toggleColor = () => {\n    this.setState({\n      color: !this.state.color,\n    })\n  };\n\n  toggleBgColor = () => {\n    this.setState({\n      bgColor: !this.state.bgColor,\n    })\n  };\n\n  toggleDisabled = () => {\n    this.setState({\n      disabled: !this.state.disabled,\n    })\n  };\n\n  toggleReadOnly = () => {\n    this.setState({\n      readOnly: !this.state.readOnly,\n    })\n  };\n\n  togglePlaceholder = () => {\n    this.setState({\n      placeholder: 'پیست یا تایپ کنید',\n    })\n  };\n\n  render(){\n    const className = this.state.color ? \"red\" : \"\";\n    const style = this.state.bgColor ? {backgroundColor: 'aqua'} : {};\n    const {disabled, readOnly, placeholder} = this.state;\n\n    const showKeyCode = (e) => {\n      this.spanRef.current.innerHTML = 'Key Code: ' + e.charCode.toString();\n    }\n\n\n    return (\n      <React.Fragment>\n        <form autoComplete=\"on\" onKeyPress={showKeyCode}>\n        <div>\n          <br/>\n          <br/>\n          <label>خروجی عدد لاتین\n            <br/>\n            <input type=\"text\" name=\"Number1_value\" style={{width: 250}} value={this.state.Number1} onChange={this.handleValueChange}  placeholder=\"از اینجا کلید تب را چند بار بزنید\" />\n          </label>\n          <br/>\n          <br/>\n          <label>\n            نمونه فارسی\n            <br/>\n            <NumberInput name=\"Number1\" disabled={disabled} readOnly={readOnly} className={className} style={style} value={this.state.Number1} onChange={this.handleChange} placeholder={placeholder} />\n          </label>\n        </div>\n        <br/>\n        <div>\n          <label>\n            نمونه لاتین\n            <br/>\n            <NumberInput name=\"Number2\" disabled={disabled} readOnly={readOnly} className={className} style={style} value={this.state.Number2} numberFormat={NUMBER_FORMAT_LATIN} onChange={this.handleChange} placeholder=\"type/paste a number\" />\n          </label>\n        </div>\n        <label>خروجی\n          <br/>\n          <input type=\"text\" name=\"Number2_value\" style={{width: 250}} value={this.state.Number2} onChange={this.handleValueChange} placeholder=\"این فیلد خروجی است\" />\n        </label>\n        <br/>\n        <br/>\n        <br/>\n        <div>\n          <label>\n            عدد اعشاری\n            <br/>\n            <DecimalInput name=\"Number3\" disabled={disabled} readOnly={readOnly} className={className} style={style} value={this.state.Number3} asString={false} maxDigits={5} maxDecimal={2} numberFormat={NUMBER_FORMAT_FARSI} onChange={this.handleChange} placeholder=\"type/paste a number\" />\n          </label>\n        </div>\n        <label>خروجی\n          <br/>\n          <input type=\"text\" name=\"Number3_value\" style={{width: 250}} value={this.state.Number3} onChange={this.handleValueChange} placeholder=\"این فیلد خروجی است\" />\n        </label>\n        <br/>\n        <br/>\n        <div>\n          <label>\n            نمونه تلفن فارسی\n            <br/>\n            <NumberInput type=\"tel\" name=\"Tel1\" disabled={disabled} readOnly={readOnly} className={className} style={style} value={this.state.Tel1} onChange={this.handleChange} maxLength={12} placeholder=\"type/paste a number\" />\n          </label>\n        </div>\n        <br/>\n        <label>ورودی شماره کارت\n            <br/>\n            <CardNumberInput\n              value={this.state.value1}\n              disabled={disabled}\n              readOnly={readOnly}\n              name={'value1'}\n              className={className} \n              style={style} \n              onChange={this.handleChange}\n              placeholder=\"شماره کارت\" />\n            <br/>\n            خروجی\n            <br/>\n            <input type=\"tel\" name=\"value1\" dir={'ltr'} value={this.state.value1} onChange={this.handleChange}/>\n          </label>\n          <br/>\n        <br/>\n        <button type=\"button\" onClick={this.toggleColor}>toggle className</button>\n        <button type=\"button\" onClick={this.toggleBgColor}>toggle style</button>\n        <button type=\"button\" onClick={this.toggleDisabled}>{disabled?'enable':'disable'}</button>\n        <button type=\"button\" onClick={this.toggleReadOnly}>{readOnly?'writable':'read only'}</button>\n        <button type=\"button\" onClick={this.togglePlaceholder}>{'change place holder'}</button>\n        <input type=\"submit\"/>\n        </form>\n        <span ref={this.spanRef}></span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Example;\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport Example from './Example';\n\nconst App = () => (\n  <div dir={\"rtl\"} style={{ margin: \"35px auto\", padding: 25 }}>\n    <h1>کمپننت عدد</h1>\n    <br/>ورژن ۲،۰ ساخت ۱۷\n    <ul>\n      <li>نمایش عدد فارسی یا لاتین</li>\n      <li>ذخیره عدد لاتین، باعث میشود که داده صحیح به سرور داده شود</li>\n      <li>نمایش غیر عدد در صورتی که داده از بیرون به آن وارد شود.</li>\n      <li>نمایش کیبورد عددی در مبایل (غیر از مرورگر سامسونگ) </li>\n      <li>قابل استفاده با Create-React-App / NextJs</li>\n    </ul>\n\n    <Example/>\n\n  </div>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}