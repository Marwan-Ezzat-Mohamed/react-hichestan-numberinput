{"version":3,"sources":["lib/NumberInput.js","Example.js","index.js"],"names":["NUMBER_FORMAT_FARSI","NUMBER_FORMAT_LATIN","lib_NumberInput","NumberInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","readValuesFromProps","value","valueToShow","mapValue","numberFormat","selectionStart","undefined","selectionEnd","handleKeyDown","event","keyCode","preventDefault","updateState","deleteValue","target","updateValue","toString","ctrlKey","handlePaste","enteredValue","stripAnyThingButDigits","clipboardData","window","getData","handleInput","values","recheckValue","mapToFarsi","mapToLatin","newState","inputRef","current","setSelectionRange","fireOnChange","element","enteredValueMapped","substring","length","qty","onChange","name","handleChange","React","createRef","rr","nextProps","nextState","_this$props","rest","onInput","onPast","onKeyDown","pattern","inputMode","type","ref","objectWithoutProperties","react_default","a","createElement","assign","defaultValue","onPaste","Component","str","replace","e","String","fromCharCode","charCodeAt","Example","state","Number1","Number2","t","setState","console","log","handleValueChange","substr","Fragment","style","width","placeholder","render","margin","src_Example","document","getElementById"],"mappings":"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","file":"static/js/main.6a886c2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport const NUMBER_FORMAT_FARSI = 'FARSI';\nexport const NUMBER_FORMAT_LATIN = 'LATIN';\n\nclass NumberInput extends Component {\n\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n\n    this.rr = 0;\n\n    this.values = this.readValuesFromProps(props);\n  }\n\n  readValuesFromProps = (props) => {\n    const value = props.value || '';\n    const valueToShow = this.mapValue(value, props.numberFormat);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart: undefined,\n      selectionEnd: undefined,\n    };\n  };\n\n  handleKeyDown = (event) => {\n    // console.log('keyCode: ', event.keyCode, 'key: ', event.key);\n    if(event.keyCode===8) { //backspace\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, -1));\n    }else if(event.keyCode===46){ //delete\n      event.preventDefault();\n      this.updateState(this.deleteValue(event.target, 1));\n    }else if(event.keyCode>=48 && event.keyCode<=57){ //digits\n      event.preventDefault();\n      // console.log('digit');\n      this.updateState(this.updateValue(event.target, (event.keyCode - 48).toString(), this.props.numberFormat));\n    }else if(event.keyCode>=36 && event.keyCode<=40){ //arrows\n    }else if(event.keyCode===9){ //tab\n    }else if(event.ctrlKey && (event.keyCode===67 || event.keyCode===86)){ //copy/paste\n    }else if(event.keyCode===229){ //android bug workaround\n    }else{\n      // console.log('other');\n      // console.log('keyCode: ', event.keyCode, 'key: ', event.key, 'ctrlKey: ', event.ctrlKey);\n      event.preventDefault();\n    }\n  };\n\n  handlePaste = (event) => {\n    event.preventDefault();\n\n    const enteredValue = stripAnyThingButDigits((event.clipboardData || window.clipboardData).getData('text'));\n\n    this.updateState(this.updateValue(event.target, enteredValue, this.props.numberFormat));\n  };\n\n  handleInput = (event) => {\n    if(this.values.valueToShow===event.target.value) return;\n\n    const enteredValue = stripAnyThingButDigits(event.target.value);\n\n    this.updateState(this.recheckValue(event.target, enteredValue, this.props.numberFormat));\n  };\n\n  mapValue = (value, numberFormat) => {\n    if(numberFormat===NUMBER_FORMAT_FARSI){\n      return mapToFarsi(value);\n    }else if(numberFormat===NUMBER_FORMAT_LATIN){\n      return mapToLatin(value);\n    }\n    return mapToFarsi(value);\n  };\n\n\n  updateState = (newState) => {\n    if(!newState) return;\n\n    this.values = newState;\n    this.inputRef.current.value = this.values.valueToShow;\n    this.inputRef.current.setSelectionRange(this.values.selectionStart, this.values.selectionEnd);\n    this.fireOnChange();\n  };\n\n  updateValue = (element, enteredValue, numberFormat) => {\n    const enteredValueMapped = this.mapValue(enteredValue, numberFormat);\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    valueToShow = valueToShow.substring(0, selectionStart) + enteredValueMapped + valueToShow.substring(selectionEnd);\n\n    selectionStart += enteredValueMapped.length;\n    selectionEnd = selectionStart;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  recheckValue = (element, enteredValue, numberFormat) => {\n    let valueToShow = this.mapValue(enteredValue, numberFormat);\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  deleteValue = (element, qty) => {\n    let valueToShow = element.value;\n    let selectionStart = element.selectionStart;\n    let selectionEnd = element.selectionEnd;\n\n    // console.log({selectionStart, selectionEnd})\n\n    if(selectionStart===selectionEnd){\n      if(qty < 0) {\n        if(selectionStart===0) return;\n        valueToShow = valueToShow.substring(0, selectionStart + qty) + valueToShow.substring(selectionEnd);\n        selectionStart += qty;\n      }else{\n        if(selectionEnd===valueToShow.length) return;\n        valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd+qty);\n      }\n    }else{\n      valueToShow = valueToShow.substring(0, selectionStart) + valueToShow.substring(selectionEnd);\n    }\n\n    selectionEnd = selectionStart;\n\n    const value = mapToLatin(valueToShow);\n\n    return {\n      value,\n      valueToShow,\n      selectionStart,\n      selectionEnd,\n    };\n  };\n\n  fireOnChange = () => {\n    if(this.props.onChange){\n      this.props.onChange({target: {name: this.props.name, value: this.values.value}});\n    }\n  };\n\n  handleChange = () => {\n    //we do not use the onChange, we use the keyPress and paste instead\n  };\n\n  shouldComponentUpdate(nextProps, nextState){\n    if(nextProps.value !== this.values.value || nextProps.numberFormat !== this.props.numberFormat){\n      this.updateState(this.readValuesFromProps(nextProps));\n    }\n    return false;\n  }\n\n  render() {\n\n    this.rr += 1;\n    // console.log('rendered')\n\n    const {value, onChange, onInput, onPast, onKeyDown, pattern, inputMode, type, ref, numberFormat, ...rest} = this.props;\n    const {valueToShow} = this.values;\n\n    return (\n      <input\n        ref={this.inputRef}\n        type={\"text\"}\n        inputMode={\"numeric\"}\n        pattern={\"[0-9]*\"}\n        defaultValue={valueToShow}\n        onKeyDown={this.handleKeyDown}\n        onPaste={this.handlePaste}\n        onChange={this.handleChange}\n        onInput={this.handleInput}\n        {...rest}\n      />\n      );\n  }\n}\nexport default NumberInput;\n\n\nexport function mapToFarsi(str) {\n  if(!str) return str;\n  return str.toString().replace(/[1234567890]/gi, e => String.fromCharCode(e.charCodeAt(0) + 1728))\n}\n\nexport function mapToLatin(str) {\n  if(!str) return str;\n  return str.toString().replace(/[۱۲۳۴۵۶۷۸۹۰]/gi, e => String.fromCharCode(e.charCodeAt(0) - 1728))\n}\n\nexport function stripAnyThingButDigits(str) {\n  if(!str) return str;\n  return str.toString().replace(/[^1234567890۱۲۳۴۵۶۷۸۹۰]/gi, '');\n}\n","import React, { Component } from 'react';\nimport { NumberInput } from \"./lib\";\nimport {NUMBER_FORMAT_LATIN} from './lib/NumberInput';\n\nclass Example extends Component {\n  state = {\n    Number1: '',\n    Number2: '123',\n  };\n\n  handleChange = (event) => {\n    const newState = {};\n    const t = event.target;\n\n    newState[t.name] = t.value;\n    this.setState(newState, ()=>{\n      console.log('after', this.state)\n    });\n  };\n\n  handleValueChange = (event) => {\n    const newState = {};\n    const t = event.target;\n\n    newState[t.name.substr(0, 7)] = t.value;\n    this.setState(newState, ()=>{\n      console.log('after', this.state)\n    });\n  };\n\n  render(){\n    return (\n      <React.Fragment>\n        <div>\n          <br/>\n          <br/>\n          <br/>\n          <label>خروجی عدد لاتین\n            <br/>\n            <input type=\"text\" name=\"Number1_value\" style={{width: 250}} value={this.state.Number1} onChange={this.handleValueChange}  placeholder=\"از اینجا کلید تب را چند بار بزنید\" />\n          </label>\n          <br/>\n          <br/>\n          <label>\n            نمونه فارسی\n            <br/>\n            <NumberInput name=\"Number1\" value={this.state.Number1} onChange={this.handleChange} placeholder=\"type/paste a number\" />\n          </label>\n        </div>\n        <br/>\n        <div>\n          <label>\n            نمونه لاتین\n            <br/>\n            <NumberInput name=\"Number2\" value={this.state.Number2} numberFormat={NUMBER_FORMAT_LATIN} onChange={this.handleChange} placeholder=\"type/paste a number\" />\n          </label>\n        </div>\n        <br/>\n        <br/>\n        <label>خروجی\n          <br/>\n          <input type=\"text\" name=\"Number2_value\" style={{width: 250}} value={this.state.Number2} onChange={this.handleValueChange} placeholder=\"این فیلد خروجی است\" />\n        </label>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Example;\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport Example from './Example';\n\nconst App = () => (\n  <div style={{ width: 640, margin: \"15px auto\" }}>\n    <h1>Hello React</h1>\n\n    <Example/>\n\n  </div>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}